{"version":3,"sources":["exo_entity_browser/src/ExoThemeProvider/ExoEntityBrowser/scss/components/_iframe.scss","exo_entity_browser/src/ExoThemeProvider/ExoEntityBrowser/scss/components/_view.scss","exo/src/scss/util/_flex.scss","exo/src/scss/base/_variables.scss","exo_entity_browser/src/ExoThemeProvider/ExoEntityBrowser/scss/components/_view-grid.scss","exo/src/scss/util/_breakpoint.scss","exo_entity_browser/src/ExoThemeProvider/ExoEntityBrowser/scss/components/_view-table.scss","exo_entity_browser/src/ExoThemeProvider/ExoEntityBrowser/scss/components/_form.scss","exo_entity_browser/src/ExoThemeProvider/ExoEntityBrowser/scss/components/_entities-list.scss","exo_entity_browser/src/ExoThemeProvider/ExoEntityBrowser/scss/components/_preview.scss"],"names":[],"mappings":"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","file":"exo-entity-browser.css","sourcesContent":["/* Remove the border on our iframe element. */\n\n.entity-browser-iframe-container {\n  position: relative;\n\n  iframe {\n    border: none;\n    position: relative;\n    z-index: 501;\n  }\n\n  .ajax-progress-fullscreen {\n    position: absolute;\n    z-index: 500;\n  }\n}\n","$curve: cubic-bezier(0.65, 0, 0.45, 1);\n\n.exo-entity-browser-view {\n  @include flex;\n  @include exo-flex-direction(column);\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  overflow: hidden;\n  height: 100vh;\n\n  // Due to AJAX adding in all sorts of empty divs, we need to be tricky.\n  .view,\n  div:not([class]) {\n    display: flex;\n    flex: 1;\n  }\n\n  .view,\n  > div:not([class]) {\n    overflow: auto;\n  }\n\n  .view {\n    @include flex;\n    @include exo-flex-direction(column);\n\n    div:not([class]) {\n      height: auto;\n    }\n  }\n\n  .view-filters {\n    height: auto;\n\n    .form--inline {\n      @include flex;\n      align-items: flex-end;\n      flex-wrap: wrap;\n    }\n  }\n\n  .view-content {\n    flex: 1;\n    overflow-y: auto;\n    border: 1px solid grey(15);\n    padding: $global-padding;\n\n    thead {\n\n      > tr {\n        border-bottom: 1px solid grey(15);\n      }\n\n      th {\n        border: 0;\n      }\n    }\n\n    .disabled {\n      opacity: 0.5;\n      pointer-events: none;\n    }\n  }\n\n  .entities-list-actions {\n    @include flex;\n  }\n\n  .entity-browser-use-selected,\n  .entity-browser-show-selection {\n    display: block;\n    margin: 0;\n    width: 100%;\n  }\n}\n\n/**\n * Checkmark\n */\n\n .exo-entity-browser-checkmark {\n  width: 56px;\n  height: 56px;\n  border-radius: 50%;\n  display: block;\n  stroke-width: 2;\n  stroke: color(theme-white);\n  stroke-miterlimit: 10;\n  margin: 0 auto;\n  opacity: 0;\n\n  .checked & {\n    opacity: 1;\n    // transform: scale3d(1.1, 1.1, 1);\n    // box-shadow: inset 0 0 0 30px color(theme-success), 0 0 30px color(theme-black);\n    animation: fillIn 300ms ease-in-out forwards, scaleIn 300ms ease-in-out both;\n  }\n\n  .unchecked & {\n    opacity: 1;\n    animation: fillOut 300ms ease-in-out forwards, scaleOut 300ms ease-in-out both;\n  }\n}\n\n.exo-entity-browser-checkmark--circle {\n  stroke-dasharray: 166;\n  stroke-dashoffset: 166;\n  stroke-width: 2;\n  stroke-miterlimit: 10;\n  stroke: color(theme-success);\n  fill: none;\n\n  .checked & {\n    // stroke-dashoffset: 0;\n    animation: stroke 300ms $curve forwards;\n  }\n}\n\n.exo-entity-browser-checkmark--check {\n  transform-origin: 50% 50%;\n  stroke-dasharray: 48;\n  stroke-dashoffset: 48;\n\n  .checked & {\n    // stroke-dashoffset: 0;\n    animation: stroke 300ms $curve forwards;\n  }\n}\n\n@keyframes stroke {\n  100% {\n    stroke-dashoffset: 0;\n  }\n}\n\n@keyframes scaleIn {\n  0%, 100% {\n    transform: none;\n  }\n\n  50% {\n    transform: scale3d(1.1, 1.1, 1);\n  }\n}\n\n@keyframes scaleOut {\n  0%, 100% {\n    transform: none;\n  }\n\n  50% {\n    transform: scale3d(1.1, 1.1, 1);\n  }\n}\n\n@keyframes fillIn {\n  0% {\n    opacity: 0;\n    box-shadow: inset 0 0 0 0 color(theme-success);\n  }\n\n  20% {\n    opacity: 1;\n  }\n\n  100% {\n    box-shadow: inset 0 0 0 30px color(theme-success), 0 0 20px alpha(theme-black, .5);\n  }\n}\n\n@keyframes fillOut {\n  0% {\n    opacity: 1;\n    box-shadow: inset 0 0 0 30px color(theme-success);\n  }\n\n  100% {\n    opacity: 0;\n    box-shadow: inset 0 0 0 0 color(theme-success);\n  }\n}\n","@function -exo-flex-justify($text-direction) {\n  $-exo-flex-justify: (\n    'left': if($text-direction == rtl, flex-end, flex-start),\n    'right': if($text-direction == rtl, flex-start, flex-end),\n    'center': center,\n    'justify': space-between,\n    'spaced': space-around,\n  );\n  @return $-exo-flex-justify;\n}\n\n$-exo-flex-align: (\n  'top': flex-start,\n  'bottom': flex-end,\n  'middle': center,\n  'stretch': stretch,\n  'baseline': baseline,\n);\n\n$-exo-flex-direction: (\n  'row': row,\n  'row-reverse': row-reverse,\n  'column': column,\n  'column-reverse': column-reverse,\n);\n\n/// Enables flexbox by adding `display: flex` to the element.\n@mixin flex {\n  display: flex;\n}\n\n/// Horizontally or vertically aligns the items within a flex container.\n///\n/// @param {Keyword} $x [null] - Horizontal alignment to use. Can be `left`, `right`, `center`, `justify`, or `spaced`. Or, set it to `null` (the default) to not set horizontal alignment.\n/// @param {Keyword} $y [null] - Vertical alignment to use. Can be `top`, `bottom`, `middle`, `baseline`, or `stretch`. Or, set it to `null` (the default) to not set vertical alignment.\n@mixin flex-align($x: null, $y: null) {\n  @if $x {\n    @if map-has-key($-exo-flex-justify, $x) {\n      $x: map-get($-exo-flex-justify, $x);\n    }\n    @else {\n      @warn 'flex-grid-row-align(): #{$x} is not a valid value for horizontal alignment. Use left, right, center, justify, or spaced.';\n    }\n  }\n  @if $y {\n    @if map-has-key($-exo-flex-align, $y) {\n      $y: map-get($-exo-flex-align, $y);\n    }\n    @else {\n      @warn 'flex-grid-row-align(): #{$y} is not a valid value for vertical alignment. Use top, bottom, middle, or stretch.';\n    }\n  }\n\n  justify-content: $x;\n  align-items: $y;\n}\n\n/// Vertically align a single column within a flex row. Apply this mixin to a flex column.\n///\n/// @param {Keyword} $y [null] - Vertical alignment to use. Can be `top`, `bottom`, `middle`, or `stretch`. Or, set it to `null` (the default) to not set vertical alignment.\n@mixin flex-align-self($y: null) {\n  @if $y {\n    @if map-has-key($-exo-flex-align, $y) {\n      $y: map-get($-exo-flex-align, $y);\n    }\n    @else {\n      @warn 'flex-grid-column-align(): #{$y} is not a valid value for alignment. Use top, bottom, middle, or stretch.';\n    }\n  }\n\n  align-self: $y;\n}\n\n/// Changes the source order of a flex child. Children with lower numbers appear first in the layout.\n/// @param {Number} $order [0] - Order number to apply.\n@mixin flex-order($order: 0) {\n  order: $order;\n}\n\n/// Change flex-direction\n/// @param {Keyword} $direction [row] - Flex direction to use. Can be\n///   - row (default): same as text direction\n///   - row-reverse: opposite to text direction\n///   - column: same as row but top to bottom\n///   - column-reverse: same as row-reverse top to bottom\n/// @param {Keyword} $medium-direction [$direction] - Flex direction to use for medium. Defaults to $direction but can be `row`, `row-reverse`, `column`, or `column-reverse`.\n/// @param {Keyword} $large-direction [$medium-direction] - Flex direction to use for large. Defaults to $medium-direction but can be `row`, `row-reverse`, `column`, or `column-reverse`.\n@mixin exo-flex-direction($direction: row, $medium-direction: $direction, $large-direction: $medium-direction) {\n  flex-direction: $direction;\n\n  @if ($medium-direction != $direction) {\n\n    @include breakpoint(medium) {\n      flex-direction: $medium-direction;\n    }\n  }\n\n  @if ($large-direction != $medium-direction) {\n\n    @include breakpoint(large) {\n      flex-direction: $large-direction;\n    }\n  }\n}\n\n","////////////////////////////////////////////////////////////////////////////////\n/// Colors\n////////////////////////////////////////////////////////////////////////////////\n\n$global-colors: (\n  theme-black: #1a1a1a,\n  theme-white: #fff,\n  theme-gray: #777,\n  theme-base: #373a3c,\n  theme-offset: #f1f1f1,\n  theme-primary: #2780e3,\n  theme-secondary: #b6bf3d,\n  theme-success: #86c13d,\n  theme-warning: #f1ba2e,\n  theme-alert: #e54040,\n) !default;\n\n// Themes will add colors to this variable.\n$colors: () !default;\n\n////////////////////////////////////////////////////////////////////////////////\n/// Globals\n////////////////////////////////////////////////////////////////////////////////\n$global-speed: 350ms;\n$global-radius: 3px;\n$global-font-size: 100%;\n$global-lineheight: 1.5;\n$global-speed: 350ms;\n$global-radius: 3px;\n$global-menu-padding: 0.7rem 1rem !default;\n$menu-items-padding: $global-menu-padding !default;\n$body-antialiased: true;\n$global-margin: 1rem;\n$global-padding: 1rem;\n$global-position: 1rem;\n$global-weight-normal: normal;\n$global-weight-bold: bold;\n$global-width: rem-calc(1100);\n$grid-row-width: $global-width;\n$grid-container: $global-width;\n\n/// Sets the text direction of the CSS. Can be either `ltr` or `rtl`.\n/// @type Keyword\n$global-text-direction: ltr !default;\n$global-left: if($global-text-direction == rtl, right, left);\n$global-right: if($global-text-direction == rtl, left, right);\n\n// Internal variable that contains the flex justifying options\n$-exo-flex-justify: -exo-flex-justify($global-text-direction);\n\n$sizes: (\n  margin: rem-calc(30),\n  padding: rem-calc(30),\n  font: rem-calc(16),\n);\n\n/// Global tolerance for color pick contrast.\n/// @type Number\n$global-color-pick-contrast-tolerance: 0 !default;\n$contrast-warnings: true !default;\n",".exo-entity-browser-grid {\n  $curve: cubic-bezier(0.65, 0, 0.45, 1);\n\n  .view-content {\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    grid-template-rows: auto auto auto auto auto auto;\n    overflow: hidden;\n    grid-gap: 10px 10px;\n\n    @include breakpoint(medium) {\n      grid-template-columns: 1fr 1fr 1fr 1fr;\n      grid-template-rows: auto auto auto auto;\n    }\n\n    @include breakpoint(large) {\n      grid-template-columns: 1fr 1fr 1fr 1fr 1fr;\n      grid-template-rows: auto auto auto;\n    }\n\n    .views-field-thumbnail__target-id {\n      position: absolute;\n      top: 5px;\n      left: 5px;\n      right: 5px;\n      bottom: 5px;\n      z-index: 0;\n    }\n\n    img {\n      object-fit: cover;\n      object-position: center center;\n      height: 100%;\n      width: 100%;\n      max-width: inherit;\n    }\n  }\n\n  .views-row {\n    position: relative;\n    background: grey(10);\n    padding: 4px;\n    margin: 1px;\n    transition: background $global-speed;\n    overflow: hidden;\n    cursor: pointer;\n\n    &:hover {\n      background: grey(40);\n    }\n\n    .views-field-entity-browser-select {\n      position: absolute;\n      top: 0;\n      left: 0;\n      right: 0;\n      bottom: 0;\n      z-index: 2;\n\n      .form-item {\n        display: none;\n      }\n    }\n\n    .exo-entity-browser-info {\n      @include flex;\n      @include flex-align(center, middle);\n      position: absolute;\n      left: 5px;\n      right: 5px;\n      bottom: 5px;\n      background: shadow(50);\n      color: color(theme-white);\n      padding: 5px 10px;\n      z-index: 1;\n\n      .views-field {\n        font-size: rem-calc(12);\n        padding: 0 rem-calc(4);\n      }\n    }\n\n    .views-field-name {\n      font-weight: bold;\n    }\n\n    .exo-entity-browser-check {\n      @include flex;\n      align-items: center;\n      position: absolute;\n      top: 0;\n      left: 0;\n      right: 0;\n      bottom: 0;\n      pointer-events: none;\n      z-index: 2;\n    }\n\n    &.checked {\n      background: color(theme-success);\n    }\n  }\n}\n","@use \"sass:math\";\n@import './unit';\n\n////\n/// @group breakpoints\n////\n\n/// A list of named breakpoints. You can use these with the `breakpoint()` mixin to quickly create media queries.\n/// @type Map\n$breakpoints: (\n  small: 0, // converted from \"0\"\n  medium: 40em, // converted from \"all and (min-width: 40em)\"\n  large: 64em, // converted from \"all and (min-width: 64em)\"\n  xlarge: 120em, // converted from \"all and (min-width: 120em)\"\n) !default;\n\n/// The largest named breakpoint in which to include print as a media type\n/// @type Keyword\n$print-breakpoint: large !default;\n\n$-exo-zero-breakpoint: small !default;\n\n$-exo-breakpoints-keys: map-to-list($breakpoints, 'keys');\n\n@if nth(map-values($breakpoints), 1) != 0 {\n  @error 'Your smallest breakpoint (defined in $breakpoints) must be set to \"0\".';\n}\n@else {\n  $-exo-zero-breakpoint: nth(map-keys($breakpoints), 1);\n}\n\n/// All of the names in this list will be output as classes in your CSS, like `.small-12`, `.medium-6`, and so on. Each value in this list must also be in the `$breakpoints` map.\n/// @type List\n$breakpoint-classes: (small medium large) !default;\n\n/// Generates a media query string matching the input value. Refer to the documentation for the `breakpoint()` mixin to see what the possible inputs are.\n///\n/// @param {Keyword|Number} $val [small] - Breakpoint name, or px, rem, or em value to process.\n@function breakpoint($val: $-exo-zero-breakpoint) {\n  // Size or keyword\n  $bp: nth($val, 1);\n  // Value for max-width media queries\n  $bp-max: 0;\n  // Direction of media query (up, down, or only)\n  $dir: if(length($val) > 1, nth($val, 2), up);\n  // Eventual output\n  $str: '';\n  // Is it a named media query?\n  $named: false;\n\n  // Orientation media queries have a unique syntax\n  @if $bp == 'landscape' or $bp == 'portrait' {\n    @return '(orientation: #{$bp})';\n  }\n  @else if $bp == 'retina' {\n    @return '(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi)';\n  }\n\n  // Try to pull a named breakpoint out of the $breakpoints map\n  @if type-of($bp) == 'string' {\n    @if map-has-key($breakpoints, $bp) {\n      @if $dir == 'only' or $dir == 'down' {\n        $bp-max: -exo-map-next($breakpoints, $bp);\n      }\n\n      $bp: map-get($breakpoints, $bp);\n      $named: true;\n    }\n    @else {\n      $bp: 0;\n      @warn 'breakpoint(): \"#{$val}\" is not defined in your $breakpoints setting.';\n    }\n  }\n\n  // Convert any pixel, rem, or unitless value to em\n  $bp: -exo-bp-to-em($bp);\n  @if $bp-max {\n    $bp-max: -exo-bp-to-em($bp-max) - math.div(1, 16);\n  }\n\n  // Conditions to skip media query creation\n  // - It's a named breakpoint that resolved to \"0 down\" or \"0 up\"\n  // - It's a numeric breakpoint that resolved to \"0 \" + anything\n  @if $bp > 0em or $dir == 'only' or $dir == 'down' {\n    // `only` ranges use the format `(min-width: n) and (max-width: n)`\n    @if $dir == 'only' {\n      // Only named media queries can have an \"only\" range\n      @if $named == true {\n        // Only use \"min-width\" if the floor is greater than 0\n        @if $bp > 0em {\n          $str: $str + '(min-width: #{$bp})';\n\n          // Only add \"and\" to the media query if there's a ceiling\n          @if $bp-max != null {\n            $str: $str + ' and ';\n          }\n        }\n\n        // Only use \"max-width\" if there's a ceiling\n        @if $bp-max != null {\n          $str: $str + '(max-width: #{$bp-max})';\n        }\n      }\n      @else {\n        @warn 'breakpoint(): Only named media queries can have an `only` range.';\n      }\n    }\n\n    // `down` ranges use the format `(max-width: n)`\n    @else if $dir == 'down' {\n      $max: if($named, $bp-max, $bp);\n\n      // Skip media query creation if input value is exactly \"0 down\",\n      // unless the function was called as \"small down\", in which case it's just \"small only\"\n      @if $named or $bp > 0em {\n        @if $max != null {\n          $str: $str + '(max-width: #{$max})';\n        }\n      }\n    }\n\n    // `up` ranges use the format `(min-width: n)`\n    @else if $bp > 0em {\n      $str: $str + '(min-width: #{$bp})';\n    }\n  }\n\n  @return $str;\n}\n\n/// Wraps a media query around the content you put inside the mixin. This mixin accepts a number of values:\n///  - If a string is passed, the mixin will look for it in the `$breakpoints` map, and use a media query there.\n///  - If a pixel value is passed, it will be converted to an em value using `$global-font-size` as the base.\n///  - If a rem value is passed, the unit will be changed to em.\n///  - If an em value is passed, the value will be used as-is.\n///\n/// @param {Keyword|Number} $value - Breakpoint name, or px, rem, or em value to process.\n///\n/// @output If the breakpoint is \"0px and larger\", outputs the content as-is. Otherwise, outputs the content wrapped in a media query.\n@mixin breakpoint($value) {\n  $str: breakpoint($value);\n  $bp: index($-exo-breakpoints-keys, $value);\n  $pbp: index($-exo-breakpoints-keys, $print-breakpoint);\n\n  $old-exo-size: null;\n\n  // Make breakpoint size available as a variable\n  @if global-variable-exists(-exo-size) {\n    $old-exo-size: $-exo-size;\n  }\n  $-exo-size: nth($value, 1) !global; // get the first value to account for `only` and `down` keywords\n\n  // If $str is still an empty string, no media query is needed\n  @if $str == '' {\n    @content;\n  }\n\n  // Otherwise, wrap the content in a media query\n  @else {\n    // For named breakpoints less than or equal to $print-breakpoint, add print to the media types\n    @if $bp != null and $bp <= $pbp {\n      @media print, screen and #{$str} {\n        @content;\n       }\n    }\n    @else {\n      @media screen and #{$str} {\n        @content;\n      }\n    }\n  }\n\n  @if $old-exo-size != null {\n    // Restore the old breakpoint size\n    $-exo-size: $old-exo-size !global;\n  }\n  @else {\n    $-exo-size: null !global;\n  }\n}\n\n/// Convers the breakpoints map to a URL-encoded string, like this: `key1=value1&key2=value2`. The value is then dropped into the CSS for a special `<meta>` tag, which is read by the Foundation JavaScript. This is how we transfer values from Sass to JavaScript, so they can be defined in one place.\n/// @access private\n///\n/// @param {Map} $map - Map to convert.\n///\n/// @returns {String} A string containing the map's contents.\n@function -exo-bp-serialize($map) {\n  $str: '';\n  @each $key, $value in $map {\n    $str: $str + $key + '=' + -exo-bp-to-em($value) + '&';\n  }\n  $str: str-slice($str, 1, -2);\n\n  @return $str;\n}\n\n/// Find the next key in a map.\n/// @access private\n///\n/// @param {Map} $map - Map to traverse.\n/// @param {Mixed} $key - Key to use as a starting point.\n///\n/// @returns {Mixed} The value for the key after `$key`, if `$key` was found. If `$key` was not found, or `$key` was the last value in the map, returns `null`.\n@function -exo-map-next($map, $key) {\n\n  // Store the keys of the map as a list\n  $values: map-keys($map);\n\n  $i: 0;\n\n  // If the Key Exists, Get the index of the key within the map and add 1 to it for the next breakpoint in the map\n  @if (map-has-key($map, $key)) {\n    $i: index($values, $key) + 1;\n  }\n\n  // If the key doesn't exist, or it's the last key in the map, return null\n  @if ($i > length($map) or $i == 0) {\n    @return null;\n  }\n  // Otherwise, return the value\n  @else {\n    @return map-get($map, nth($values, $i));\n  }\n\n}\n\n/// Return a list of our named breakpoints less than $key. Useful for dealing with\n/// responsive gutters for the grid.\n/// @access private\n///\n/// @param {String} $key - Key to use as last breakpoint.\n///\n/// @returns {Array} The list of breakpoints up to and. If $key is auto, returns breakpoints above the zero\n@function -exo-breakpoints-less-than($key) {\n  $list: ();\n  $found-key: false;\n\n  @each $name in $-exo-breakpoints-keys {\n    @if ($name == $key) {\n      $found-key: true;\n    }\n    @if not $found-key {\n      $list: append($list, $name);\n    }\n  }\n  @return $list;\n}\n\n/// Return a list of our named breakpoints less than $key. Useful for dealing with\n/// responsive gutters for the grid.\n/// @access private\n///\n/// @param {String} $breakpoing - a named or non-named breakpoing.\n///\n/// @returns {Array} The list of breakpoints up to and. If $key is auto, returns breakpoints above the zero\n@function -exo-closest-named-breakpoint($breakpoint) {\n  $last: $-exo-zero-breakpoint;\n  $found: false;\n\n  $value: unitless-calc($breakpoint, 1px);\n  @each $key, $val in $breakpoints {\n    @if not $found {\n      @if unitless-calc($val) > $value {\n        $found: true;\n      }\n      @else {\n        $last: $key;\n      }\n    }\n  }\n\n  @return $last;\n}\n\n/// Get a value for a breakpoint from a responsive config map or single value.\n/// - If the config is a single value, return it regardless of `$value`.\n/// - If the config is a map and has the key `$value`, the exact breakpoint value is returned.\n/// - If the config is a map and does *not* have the breakpoint, the value matching the next lowest breakpoint in the config map is returned.\n/// @access private\n///\n/// @param {Number|Map} $map - Responsive config map or single value.\n/// @param {Keyword} $value - Breakpoint name to use.\n///\n/// @return {Mixed} The corresponding breakpoint value.\n@function -exo-get-bp-val($map, $value) {\n  // If the given map is a single value, return it\n  @if type-of($map) == 'number' {\n    @return $map;\n  }\n\n  // Check if the breakpoint name exists globally\n  @if not map-has-key($breakpoints, $value) {\n    @if type-of($value) == 'number' {\n      $value: -exo-closest-named-breakpoint($value);\n    }\n    @else {\n      @return null;\n    }\n  }\n  // Check if the breakpoint name exists in the local config map\n  @else if map-has-key($map, $value) {\n    // If it does, just return the value\n    @return map-get($map, $value);\n  }\n  // Otherwise, find the next lowest breakpoint and return that value\n  @else {\n    $anchor: null;\n    $found: false;\n\n    @each $key, $val in $breakpoints {\n      @if not $found {\n        @if map-has-key($map, $key) {\n          $anchor: $key;\n        }\n        @if $key == $value {\n          $found: true;\n        }\n      }\n    }\n\n    @return map-get($map, $anchor);\n  }\n}\n\n/// Return the best breakpoint to use according to the calling context. It returns in order:\n/// 1. the given `$value` argument if it is not null.\n/// 2. the global breakpoint context `$-zf-size` if it is not null (like if called inside then `breakpoint()` mixin)\n/// 3. the given `$default` argument.\n/// @access private\n///\n/// @param {Keyword} $value [null] - Breakpoint to use in priority if non-null.\n/// @param {Keyword} $default [null] - Breakpoint to use by default if no other value can be used.\n///\n/// @return {Keyword} The resolved breakpoint.\n@function -exo-current-breakpoint($value: null, $default: null) {\n  @if ($value != null) {\n    @return $value;\n  }\n  @else if (variable-exists(-exo-size) and type-of($-exo-size) != 'number') and $-exo-size != null {\n    @return $-exo-size;\n  }\n  @else {\n    @return $default;\n  }\n}\n\n@if map-has-key($breakpoints, small) {\n  $small-up: screen;\n  $small-only: unquote('screen and #{breakpoint(small only)}');\n}\n\n@if map-has-key($breakpoints, medium) {\n  $medium-up: unquote('screen and #{breakpoint(medium)}');\n  $medium-only: unquote('screen and #{breakpoint(medium only)}');\n}\n\n@if map-has-key($breakpoints, large) {\n  $large-up: unquote('screen and #{breakpoint(large)}');\n  $large-only: unquote('screen and #{breakpoint(large only)}');\n}\n\n@if map-has-key($breakpoints, xlarge) {\n  $xlarge-up: unquote('screen and #{breakpoint(xlarge)}');\n  $xlarge-only: unquote('screen and #{breakpoint(xlarge only)}');\n}\n\n@if map-has-key($breakpoints, xxlarge) {\n  $xxlarge-up: unquote('screen and #{breakpoint(xxlarge)}');\n}\n",".exo-entity-browser-table {\n\n  .views-table {\n    // table-layout: fixed;\n    width: 100%;\n    white-space: nowrap;\n\n    td {\n      white-space: nowrap;\n      overflow: hidden;\n      text-overflow: ellipsis;\n    }\n  }\n\n  .views-field-name {\n    font-weight: bold;\n    width: 100%;\n  }\n\n  .views-field-entity-browser-select {\n    display: table-cell !important;\n\n    .form-item {\n      display: none;\n    }\n\n    .exo-entity-browser-checkmark {\n      width: rem-calc(20);\n      height: rem-calc(20);\n    }\n  }\n\n  tbody {\n\n    tr {\n      cursor: pointer;\n      transition: background-color 300ms;\n\n      &:hover {\n        background: grey(3);\n      }\n    }\n\n    .views-field-entity-browser-select {\n      background-color: grey(5);\n      position: relative;\n\n      .exo-entity-browser-checkmark {\n        position: relative;\n        z-index: 1;\n      }\n\n      &:after {\n        content: '';\n        display: block;\n        position: absolute;\n        top: 50%;\n        left: 50%;\n        width: rem-calc(18);\n        height: rem-calc(18);\n        margin: rem-calc(-9 0 0 -9);\n        background: grey(15);\n        border-radius: 50%;\n        z-index: 0;\n      }\n    }\n  }\n}\n",".exo-entity-browser-view {\n  padding: 0 !important;\n  border: none !important;\n\n  .exo-form-container-tab {\n    display: none;\n  }\n\n  .form-type-dropzonejs {\n    @include flex;\n    @include exo-flex-direction(column);\n    @include flex-align(center, stretch);\n    height: 100%;\n    margin-bottom: 0;\n\n    > label {\n      display: none;\n    }\n\n    .dropzone {\n      @include flex;\n      @include flex-align(center, middle);\n      padding: rem-calc(20);\n      background: grey(5);\n      border: 3px dashed grey(30);\n      margin: 0;\n      min-height: 0;\n      height: 100%;\n\n      .dz-message {\n        margin: 0;\n\n        p {\n          margin: 0;\n          font-size: rem-calc(10);\n          text-transform: uppercase;\n\n          &:first-child {\n            font-size: rem-calc(14);\n            font-weight: 700;\n            text-transform: none;\n          }\n        }\n      }\n    }\n  }\n\n  .entity-browser-show-selection {\n    display: none;\n  }\n\n  #edit-actions {\n    @include flex;\n    margin: 0;\n\n    > .button {\n      width: 100%;\n    }\n  }\n\n  #ief-dropzone-upload {\n    // @include exo-flex-direction(column);\n    flex-wrap: wrap;\n    padding: rem-calc(5);\n    margin: rem-calc(10) 0;\n    background: grey(5);\n    border: 3px dashed grey(30);\n    border-radius: 5px;\n\n    > .form-wrapper {\n      margin: rem-calc(5);\n      border: 1px dashed grey(10);\n      background: grey(0);\n      padding: rem-calc(10);\n      border-radius: 3px;\n      box-sizing: border-box;\n\n      @include breakpoint(medium) {\n        $width: rem-calc(10);\n        width: calc(50% - #{$width});\n      }\n\n      @include breakpoint(large) {\n        $width: rem-calc(10);\n        width: calc(33.33% - #{$width});\n      }\n    }\n\n    .form-text {\n      width: 100%;\n    }\n\n    .description {\n      font-size: rem-calc(10);\n      line-height: 1.2;\n      color: grey(40);\n    }\n\n    .field--type-image {\n      border: 1px dashed grey(10);\n      background: grey(6);\n      padding: rem-calc(10);\n\n      .form-item {\n        margin: 0;\n      }\n\n      $width: rem-calc(110);\n      .image-preview {\n        box-sizing: border-box;\n        width: $width;\n      }\n\n      .image-widget-data {\n        box-sizing: border-box;\n        width: calc(100% - #{$width});\n      }\n    }\n  }\n}\n",".entities-list {\n  border: 1px solid grey(10);\n  background: grey(3);\n  padding: rem-calc(5);\n  margin-top: rem-calc(10);\n\n  .item-container {\n    border: 1px solid grey(10);\n    background: grey(6);\n    padding: rem-calc(10);\n    margin: rem-calc(2);\n\n    input {\n      width: 100%;\n    }\n  }\n}\n",".exo-media-preview {\n  max-width: rem-calc(100);\n  text-align: center;\n\n  > .field {\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n  }\n}\n"]}