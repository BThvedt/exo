{"version":3,"sources":["exo_icon/src/scss/exo.icon.field.scss","exo/src/scss/util/_flex.scss"],"names":[],"mappings":"AAKE,sBACE,YAAA,CAKA,qDACE,UAAA,CACA,mBAAA,CAIJ,uCACE,mBAAA,CACA,qBAAA,CACA,eAAA,CACA,eAAA,CAEA,gFAEE,qBAAA,CAGF,4DAAA,YAAA,CCyBF,sBAfQ,CAgBR,kBARQ,CDdJ,iBAAA,CACA,mBAAA,CACA,aAAA,CACA,iBAAA,CACA,cAAA,CACA,eAAA,CACA,aAAA,CAEA,8DACE,uBAAA,CACA,mBAAA,CAIJ,0DClBF,YAAA,CAyBA,sBAfQ,CAgBR,kBARQ,CDGJ,eAAA,CACA,kBAAA,CACA,UAAA,CACA,iCAAA,CACA,iBAAA,CACA,mBAAA,CACA,aAAA,CACA,wBAAA,CACA,0BAAA,CAEA,gEACE,kBAAA,CAOJ,2CACE,UAAA","file":"exo.icon.field.css","sourcesContent":["\n@import 'exo-common';\n\n.exo-icon-field {\n\n  input {\n    display: none;\n  }\n\n  &.form-disabled {\n\n    .exo-icon-field-widget {\n      opacity: 0.5;\n      pointer-events: none;\n    }\n  }\n\n  .exo-icon-field-widget {\n    display: inline-flex;\n    border: 1px solid grey(20);\n    height: rem-calc(42);\n    background: grey(0);\n\n    &,\n    * {\n      box-sizing: border-box;\n    }\n\n    .exo-icon-field-icon {\n      // display: block;\n      @include flex;\n      @include flex-align(center, middle);\n      font-size: rem-calc(20);\n      line-height: rem-calc(20);\n      height: rem-calc(40);\n      text-align: center;\n      width: rem-calc(50);\n      padding: rem-calc(10);\n      color: grey(90);\n\n      * {\n        vertical-align: baseline;\n        line-height: inherit;\n      }\n    }\n\n    .exo-modal-trigger {\n      @include flex;\n      @include flex-align(center, middle);\n      padding: rem-calc(10);\n      background: grey(5);\n      color: grey(50);\n      transition: background-color 300ms;\n      font-size: rem-calc(10);\n      line-height: rem-calc(20);\n      height: rem-calc(40);\n      text-shadow: 0 1px 0 grey(0);\n      border-left: 1px solid grey(20);\n\n      &:hover {\n        background: grey(15);\n      }\n    }\n  }\n\n  &.empty {\n\n    .exo-icon-field-icon {\n      opacity: 0.2;\n    }\n  }\n}\n","@function -exo-flex-justify($text-direction) {\n  $-exo-flex-justify: (\n    'left': if($text-direction == rtl, flex-end, flex-start),\n    'right': if($text-direction == rtl, flex-start, flex-end),\n    'center': center,\n    'justify': space-between,\n    'spaced': space-around,\n  );\n  @return $-exo-flex-justify;\n}\n\n$-exo-flex-align: (\n  'top': flex-start,\n  'bottom': flex-end,\n  'middle': center,\n  'stretch': stretch,\n  'baseline': baseline,\n);\n\n$-exo-flex-direction: (\n  'row': row,\n  'row-reverse': row-reverse,\n  'column': column,\n  'column-reverse': column-reverse,\n);\n\n/// Enables flexbox by adding `display: flex` to the element.\n@mixin flex {\n  display: flex;\n}\n\n/// Horizontally or vertically aligns the items within a flex container.\n///\n/// @param {Keyword} $x [null] - Horizontal alignment to use. Can be `left`, `right`, `center`, `justify`, or `spaced`. Or, set it to `null` (the default) to not set horizontal alignment.\n/// @param {Keyword} $y [null] - Vertical alignment to use. Can be `top`, `bottom`, `middle`, `baseline`, or `stretch`. Or, set it to `null` (the default) to not set vertical alignment.\n@mixin flex-align($x: null, $y: null) {\n  @if $x {\n    @if map-has-key($-exo-flex-justify, $x) {\n      $x: map-get($-exo-flex-justify, $x);\n    }\n    @else {\n      @warn 'flex-grid-row-align(): #{$x} is not a valid value for horizontal alignment. Use left, right, center, justify, or spaced.';\n    }\n  }\n  @if $y {\n    @if map-has-key($-exo-flex-align, $y) {\n      $y: map-get($-exo-flex-align, $y);\n    }\n    @else {\n      @warn 'flex-grid-row-align(): #{$y} is not a valid value for vertical alignment. Use top, bottom, middle, or stretch.';\n    }\n  }\n\n  justify-content: $x;\n  align-items: $y;\n}\n\n/// Vertically align a single column within a flex row. Apply this mixin to a flex column.\n///\n/// @param {Keyword} $y [null] - Vertical alignment to use. Can be `top`, `bottom`, `middle`, or `stretch`. Or, set it to `null` (the default) to not set vertical alignment.\n@mixin flex-align-self($y: null) {\n  @if $y {\n    @if map-has-key($-exo-flex-align, $y) {\n      $y: map-get($-exo-flex-align, $y);\n    }\n    @else {\n      @warn 'flex-grid-column-align(): #{$y} is not a valid value for alignment. Use top, bottom, middle, or stretch.';\n    }\n  }\n\n  align-self: $y;\n}\n\n/// Changes the source order of a flex child. Children with lower numbers appear first in the layout.\n/// @param {Number} $order [0] - Order number to apply.\n@mixin flex-order($order: 0) {\n  order: $order;\n}\n\n/// Change flex-direction\n/// @param {Keyword} $direction [row] - Flex direction to use. Can be\n///   - row (default): same as text direction\n///   - row-reverse: opposite to text direction\n///   - column: same as row but top to bottom\n///   - column-reverse: same as row-reverse top to bottom\n/// @param {Keyword} $medium-direction [$direction] - Flex direction to use for medium. Defaults to $direction but can be `row`, `row-reverse`, `column`, or `column-reverse`.\n/// @param {Keyword} $large-direction [$medium-direction] - Flex direction to use for large. Defaults to $medium-direction but can be `row`, `row-reverse`, `column`, or `column-reverse`.\n@mixin exo-flex-direction($direction: row, $medium-direction: $direction, $large-direction: $medium-direction) {\n  flex-direction: $direction;\n\n  @if ($medium-direction != $direction) {\n\n    @include breakpoint(medium) {\n      flex-direction: $medium-direction;\n    }\n  }\n\n  @if ($large-direction != $medium-direction) {\n\n    @include breakpoint(large) {\n      flex-direction: $large-direction;\n    }\n  }\n}\n\n"]}