{"version":3,"sources":["exo_icon/src/scss/exo.icon.browser.scss","../../Sites/augustAsh/msep/web/modules/contrib/exo/exo/src/scss/util/_flex.scss"],"names":[],"mappings":"AAIE,2CCwBA,YAAA,CDnBF,kBCmBE,YAAA,CA4DA,qBD7E4B,CAC5B,WAAA,CACA,eAAA,CAEA,oBACE,gCAAA,CAGF,oBACE,UAAA,CAGF,4CACE,iBAAA,CACA,UAAA,CACA,iBAAA,CACA,UAAA,CAGF,0CACE,aAAA,CACA,YAAA,CACA,qCAAA,CACA,mCAAA,CACA,eAAA,CACA,cAAA,CAEA,iEACE,eAAA,CACA,gBAAA,CACA,cAAA,CAEA,2ECfJ,YAAA,CAyBA,sBAfQ,CAgBR,kBARQ,CAAA,UAAA,CDCF,WAAA,CACA,qBAAA,CACA,eAAA,CACA,gBAAA,CACA,aAAA,CACA,iCAAA,CAEA,kFACE,aAAA,CAMF,iFACE,UAAA,CAMF,iFACE,kBAAA,CAMF,oFACE,kBAAA,CAMR,2CACE,uBAAA,CAEA,0EACE,UAAA,CACA,qBAAA,CACA,aAAA,CACA,kBAAA,CACA,iBAAA,CACA,wBAAA,CACA,eAAA,CACA,eAAA,CAIJ,6CACE,uBAAA,CACA,QAAA,CAEA,+EACE,UAAA,CACA,qBAAA,CACA,aAAA,CACA,kBAAA,CACA,iBAAA,CACA,gBAAA,CACA,YAAA,CACA,eAAA,CAIJ,2CCrFA,YAAA,CDuFE,oBAAA,CAGF,yCACE,aAAA,CAEA,sEACE,iBAAA,CAIJ,0CACE,gBAAA,CAEA,uEACE,oBAAA,CACA,cAAA,CACA,UAAA,CACA,gBAAA,CACA,wBAAA,CACA,mBAAA,CACA,sBAAA,CACA,oBAAA,CACA,wBAAA,CAAA,qBAAA,CAAA,gBAAA,CAEA,gFACE,UAAA,CACA,cAAA,CAGF,6EACE,aAAA","file":"exo.icon.browser.css","sourcesContent":["@import 'exo-common';\n\n.exo-icon-browser-modal {\n\n  .exo-modal-content {\n    @include flex;\n  }\n}\n\n.exo-icon-browser {\n  @include flex;\n  @include exo-flex-direction(column);\n  flex-grow: 1;\n  padding: rem-calc(10);\n\n  * {\n    box-sizing: border-box !important;\n  }\n\n  > * {\n    width: 100%;\n  }\n\n  .exo-icon-browser-loading {\n    text-align: center;\n    color: grey(50);\n    font-style: italic;\n    width: 100%;\n  }\n\n  .exo-icon-browser-icons {\n    flex: 1 1 100%;\n    display: grid;\n    grid-template-columns: repeat(10, 10%);\n    grid-template-rows: repeat(8, 12.5%);\n    margin-left: 1px;\n    margin-top: 1px;\n\n    .exo-icon-browser-icon {\n      margin-top: -1px;\n      margin-left: -1px;\n      cursor: pointer;\n\n      .exo-icon {\n        @include flex;\n        @include flex-align(center, middle);\n        width: 100%;\n        height: 100%;\n        border: 1px solid grey(20);\n        padding: rem-calc(10);\n        font-size: rem-calc(24);\n        color: grey(90);\n        transition: background-color 300ms;\n\n        &:before {\n          display: block;\n        }\n      }\n\n      &.empty {\n\n        .exo-icon {\n          color: grey(40);\n        }\n      }\n\n      &:hover {\n\n        .exo-icon {\n          background: grey(5);\n        }\n      }\n\n      &.selected {\n\n        .exo-icon {\n          background: grey(15);\n        }\n      }\n    }\n  }\n\n  .exo-icon-browser-search {\n    padding-bottom: rem-calc(5);\n\n    .exo-icon-browser-search-input {\n      width: 100%;\n      border: 1px solid grey(20);\n      height: rem-calc(40);\n      line-height: rem-calc(40);\n      font-size: rem-calc(14);\n      padding: rem-calc(5 10);\n      border-radius: 0;\n      background: grey(0);\n    }\n  }\n\n  .exo-icon-browser-category {\n    padding-bottom: rem-calc(5);\n    margin: 0;\n\n    .exo-icon-browser-category-select {\n      width: 100%;\n      border: 1px solid grey(20);\n      height: rem-calc(40);\n      line-height: rem-calc(40);\n      font-size: rem-calc(14);\n      padding: rem-calc(5);\n      outline: none;\n      box-shadow: none;\n    }\n  }\n\n  .exo-icon-browser-bottom {\n    @include flex;\n    padding-top: rem-calc(5);\n  }\n\n  .exo-icon-browser-info {\n    color: grey(30);\n\n    .exo-icon-browser-info-total {\n      font-style: italic;\n    }\n  }\n\n  .exo-icon-browser-pager {\n    margin-left: auto;\n\n    .exo-icon-browser-pager-link {\n      display: inline-block;\n      cursor: pointer;\n      color: grey(50);\n      font-weight: bold;\n      text-transform: uppercase;\n      margin-left: rem-calc(10);\n      transition: color 300ms;\n      text-decoration: none;\n      user-select: none;\n\n      &.disabled {\n        opacity: 0.3;\n        cursor: default;\n      }\n\n      &:hover {\n        color: grey(90);\n      }\n    }\n  }\n}\n","@function -exo-flex-justify($text-direction) {\n  $-exo-flex-justify: (\n    'left': if($text-direction == rtl, flex-end, flex-start),\n    'right': if($text-direction == rtl, flex-start, flex-end),\n    'center': center,\n    'justify': space-between,\n    'spaced': space-around,\n  );\n  @return $-exo-flex-justify;\n}\n\n$-exo-flex-align: (\n  'top': flex-start,\n  'bottom': flex-end,\n  'middle': center,\n  'stretch': stretch,\n  'baseline': baseline,\n);\n\n$-exo-flex-direction: (\n  'row': row,\n  'row-reverse': row-reverse,\n  'column': column,\n  'column-reverse': column-reverse,\n);\n\n/// Enables flexbox by adding `display: flex` to the element.\n@mixin flex {\n  display: flex;\n}\n\n/// Horizontally or vertically aligns the items within a flex container.\n///\n/// @param {Keyword} $x [null] - Horizontal alignment to use. Can be `left`, `right`, `center`, `justify`, or `spaced`. Or, set it to `null` (the default) to not set horizontal alignment.\n/// @param {Keyword} $y [null] - Vertical alignment to use. Can be `top`, `bottom`, `middle`, `baseline`, or `stretch`. Or, set it to `null` (the default) to not set vertical alignment.\n@mixin flex-align($x: null, $y: null) {\n  @if $x {\n    @if map-has-key($-exo-flex-justify, $x) {\n      $x: map-get($-exo-flex-justify, $x);\n    }\n    @else {\n      @warn 'flex-grid-row-align(): #{$x} is not a valid value for horizontal alignment. Use left, right, center, justify, or spaced.';\n    }\n  }\n  @if $y {\n    @if map-has-key($-exo-flex-align, $y) {\n      $y: map-get($-exo-flex-align, $y);\n    }\n    @else {\n      @warn 'flex-grid-row-align(): #{$y} is not a valid value for vertical alignment. Use top, bottom, middle, or stretch.';\n    }\n  }\n\n  justify-content: $x;\n  align-items: $y;\n}\n\n/// Vertically align a single column within a flex row. Apply this mixin to a flex column.\n///\n/// @param {Keyword} $y [null] - Vertical alignment to use. Can be `top`, `bottom`, `middle`, or `stretch`. Or, set it to `null` (the default) to not set vertical alignment.\n@mixin flex-align-self($y: null) {\n  @if $y {\n    @if map-has-key($-exo-flex-align, $y) {\n      $y: map-get($-exo-flex-align, $y);\n    }\n    @else {\n      @warn 'flex-grid-column-align(): #{$y} is not a valid value for alignment. Use top, bottom, middle, or stretch.';\n    }\n  }\n\n  align-self: $y;\n}\n\n/// Changes the source order of a flex child. Children with lower numbers appear first in the layout.\n/// @param {Number} $order [0] - Order number to apply.\n@mixin flex-order($order: 0) {\n  order: $order;\n}\n\n/// Change flex-direction\n/// @param {Keyword} $direction [row] - Flex direction to use. Can be\n///   - row (default): same as text direction\n///   - row-reverse: opposite to text direction\n///   - column: same as row but top to bottom\n///   - column-reverse: same as row-reverse top to bottom\n/// @param {Keyword} $medium-direction [$direction] - Flex direction to use for medium. Defaults to $direction but can be `row`, `row-reverse`, `column`, or `column-reverse`.\n/// @param {Keyword} $large-direction [$medium-direction] - Flex direction to use for large. Defaults to $medium-direction but can be `row`, `row-reverse`, `column`, or `column-reverse`.\n@mixin exo-flex-direction($direction: row, $medium-direction: $direction, $large-direction: $medium-direction) {\n  flex-direction: $direction;\n\n  @if ($medium-direction != $direction) {\n\n    @include breakpoint(medium) {\n      flex-direction: $medium-direction;\n    }\n  }\n\n  @if ($large-direction != $medium-direction) {\n\n    @include breakpoint(large) {\n      flex-direction: $large-direction;\n    }\n  }\n}\n\n"]}