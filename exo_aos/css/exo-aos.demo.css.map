{"version":3,"sources":["exo_aos/src/scss/exo-aos.demo.scss","../../Sites/augustAsh/msep/web/modules/contrib/exo/exo/src/scss/util/_grid.scss"],"names":[],"mappings":"AAKE,wCCgKA,YAAA,CACA,kBAAA,CD9JE,mDC+MA,aAAA,CACA,cAAA,CACA,aAAA,CA2BA,uBADM,CAhIJ,iBAAA,CAAA,gBAAA,CDnGA,0DC+OF,sBADM,CA3IJ,iBAAA,CAAA,gBAAA,CD5FN,sBACE,kBAAA,CACA,UAAA,CACA,iBAAA,CACA,cAAA,CACA,iBAAA,CACA,eAAA,CACA,aAAA,CAEA,4BACE,YAAA,CAGF,4CACE,kBAAA","file":"exo-aos.demo.css","sourcesContent":["\n@import 'exo-common';\n\n.exo-aos-demo-wrapper {\n\n  .fieldset-wrapper {\n    @include exo-grid;\n\n    > [data-aos] {\n      @include exo-cell;\n    }\n  }\n\n  &.cell-2 {\n\n    .fieldset-wrapper {\n      > [data-aos] {\n        @include exo-cell(6);\n      }\n    }\n  }\n}\n\n.exo-aos-demo-element {\n  background: color(theme-primary);\n  color: color-b-or-w(theme-primary);\n  text-align: center;\n  padding: rem-calc(40);\n  font-size: rem-calc(60);\n  font-weight: 700;\n  margin: $global-margin 0;\n\n  &.large {\n    padding: rem-calc(80);\n  }\n\n  .exo-aos-demo-element {\n    background: color(theme-secondary);\n  }\n}\n","@use \"sass:math\";\n\n/////////////////////\n// Exo Grid\n// ---------\n\n/////////////////////\n// Exo Grid Settings\n// ---------\n\n/// Enables the Exo-exo grid.\n/// @type Boolean\n$exo-grid: true !default;\n\n/// The maximum width of a grid container.\n/// @type Number\n$grid-container: $global-width !default;\n\n/// The number of columns used in the grid.\n/// @type Number\n$grid-columns: 12 !default;\n\n/// The amount of margin between cells at different screen sizes when using the margin grid. To use just one size, set the variable to a number instead of a map.\n/// @type Map | Length\n$grid-margin-gutters: $global-margin * 2 !default;\n\n/// The amount of padding in cells at different screen sizes when using the padding grid. To use just one size, set the variable to a number instead of a map.\n/// @type Map | Length\n$grid-padding-gutters: $grid-margin-gutters !default;\n\n/// The amount of padding to use when padding the grid-container.\n/// @type Map | Length\n$grid-container-padding: $grid-padding-gutters !default;\n\n/// The maximum width to apply to a grid container\n/// @type Number\n$grid-container-max: $global-width !default;\n\n/// The maximum number of cells in an Exo block grid.\n/// @type Number\n$exo-block-grid-max: 8 !default;\n\n/////////////////////\n// Exo Grid - Gutters\n// ---------\n\n/// Calculate gutter size.\n///\n/// @param {List} $gutter-position [right left] - The position to apply gutters to. Accepts `top`, `bottom`, `left`, `right` in any combination.\n/// @param {Boolean} $gutter-output [true] - Whether or not to output gutters\n/// @param {Number|Map} $gutters [$grid-margin-gutters] - Map or single value for gutters.\n/// @param {Keyword} $gutter-type [margin] - Map or single value for gutters.\n/// @param {String} $breakpoint [null] - The name of the breakpoint size in your gutters map to get the size from. If using with the `breakpoint()` mixin this will be set automatically unless manually entered.\n@function exo-gutters-value(\n  $gutter-position: right left,\n  $gutter-type: margin,\n  $gutters: $grid-margin-gutters,\n  $breakpoint: null\n) {\n  $bp-is-fallback: false;\n\n  @if ($breakpoint == null) {\n    // If `$bp-size` is available then use this, otherwise revert to the smallest bp.\n    @if(variable-exists(-exo-size) and type-of($-exo-size) != 'number') and $-exo-size != null {\n      $breakpoint: $-exo-size;\n    }\n    @else {\n      $breakpoint: $-exo-zero-breakpoint;\n      $bp-is-fallback: true;\n    }\n  }\n\n  // Get the gutter for the given breakpoint/value.\n  $gutter: -exo-get-bp-val($gutters, $breakpoint);\n  // If the breakpoint is a fallback, use a fallback gutter as well\n  @if ($bp-is-fallback == true and $gutter == null) {\n    $gutter: 0;\n  }\n\n  @return $gutter;\n}\n\n/// Create gutters for a cell/container.\n///\n/// @param {Number|Map} $gutters [$grid-margin-gutters] - Map or single value for gutters.\n/// @param {Keyword} $gutter-type [margin] - Type of gutter to output. Accepts either margin or padding.\n/// @param {List} $gutter-position [right left] - The position to apply gutters to. Accepts `top`, `bottom`, `left`, `right` in any combination.\n/// @param {Boolean} $negative [false] - Whether to apply the gutter as a negative value. Commonly used for nested grids.\n@mixin exo-gutters-set(\n  $gutters: $grid-margin-gutters,\n  $gutter-type: margin,\n  $gutter-position: right left,\n  $negative: false\n) {\n  $operator: if($negative, '-', '');\n\n  // If we have declared negative gutters, force type to `margin.\n  $gutter-type: if($negative, 'margin', $gutter-type);\n\n  // Output our margin gutters.\n  @if (type-of($gutters) == 'map') {\n    @include -exo-breakpoint-value(auto, $gutters) {\n      $gutter: rem-calc($-exo-bp-value) * 0.5;\n\n      // Loop through each gutter position\n      @each $value in $gutter-position {\n        #{$gutter-type}-#{$value}: unquote('#{$operator}#{$gutter}');\n      }\n    }\n  }\n  @else if (type-of($gutters) == 'number') {\n    $gutter: math.div(rem-calc($gutters), 2);\n\n    // Loop through each gutter position\n    @each $value in $gutter-position {\n      #{$gutter-type}-#{$value}: unquote(\"#{$operator}#{$gutter}\");\n    }\n  }\n}\n\n/////////////////////\n// Exo Grid - Grid\n// ---------\n\n/// Creates a max width container, designed to house your grid content.\n///\n/// @param {Number} $width [$grid-container] - a width to limit the container to.\n/// @param {Number} $padding [$grid-container-padding] - paddings of the container.\n@mixin exo-grid-container(\n  $width: $grid-container,\n  $padding: $grid-container-padding\n) {\n  @include exo-gutters-set($gutters: $padding, $gutter-type: padding);\n\n  max-width: $width;\n  margin: 0 auto;\n}\n\n/////////////////////\n// Exo Grid - Nested Grid\n// ---------\n/// Creates a nested grid container, designed to house your grid content.\n///\n/// @param {Number} $width [$grid-container] - a width to limit the container to.\n/// @param {Number} $padding [$grid-container-padding] - paddings of the container.\n@mixin exo-grid-container-nested(\n  $width: $grid-container,\n  $padding: $grid-container-padding\n) {\n  @include exo-gutters-set($gutters: $padding, $gutter-type: margin, $gutter-position: left right, $negative: true);\n\n  max-width: $width;\n}\n\n/// Creates a container for your flex cells.\n///\n/// @param {Keyword} $direction [horizontal] - Either horizontal or vertical direction of cells within.\n/// @param {Boolean} $wrap [true] - If the cells within should wrap or not.\n@mixin exo-grid(\n  $direction: horizontal,\n  $wrap: true\n) {\n  $direction: if($direction == 'horizontal', row, column);\n  $wrap: if($wrap, wrap, nowrap);\n\n  display: flex;\n  flex-flow: $direction $wrap;\n}\n\n/////////////////////\n// Exo Grid - Cell\n// ---------\n\n/// Calculate the percentage size of a cell.\n///\n/// @param {Number|List} $size [$grid-columns] - Size to make the cell. You can pass a value in multiple formats, such as `6`, `50%`, `1 of 2` or `1/3`.\n@function exo-cell-size(\n  $size: $grid-columns\n) {\n  // Parsing percents, decimals, n of n and number counts\n  @if type-of($size) == 'number' {\n    @if unit($size) == '%' {\n      $size: $size;\n    }\n    @else if $size < 1 {\n      $size: percentage($size);\n    }\n    @else {\n      $size: percentage(math.div($size, $grid-columns));\n    }\n  }\n\n  // Parsing \"n of n\" or \"n/n\" expressions\n  @else if type-of($size) == 'list' {\n    @if length($size) != 3 {\n      @error 'Wrong syntax for exo-cell-size(). Use the format \"n of n\" or \"n/n\".';\n    }\n    @else {\n      $size: percentage(math.div(nth($size, 1), nth($size, 3)));\n    }\n  }\n  // Anything else is incorrect\n  @else {\n    @error 'Wrong syntax for exo-cell-size(). Use a number, decimal, percentage, or \"n of n\" / \"n/n\".';\n  }\n\n  @return $size;\n}\n\n/// Sets base flex properties for cells.\n///\n/// @param {Keyword} $size [full] - The size of your cell. Accepts `full`, `auto`, `shrink` or `grow`.\n@mixin exo-cell-base($size: full) {\n  @if($size == 'full') {\n    // This is the base style, all others inherit from it\n    flex: 0 0 auto;\n    min-height: 0px; // sass-lint:disable-line zero-unit\n    min-width: 0px; // sass-lint:disable-line zero-unit\n  }\n  @else if ($size == 'auto') {\n    flex: 1 1 0px; // sass-lint:disable-line zero-unit\n  }\n  @else if ($size == 'shrink') {\n    flex: 0 0 auto;\n  }\n  @else if ($size == 'grow') {\n    flex: 1 0 auto;\n  }\n}\n\n/// Resets a cells width (or height if vertical is true) as well as strips its gutters.\n///\n/// @param {Boolean} $vertical [false] - Set to true to output vertical (height) styles rather than widths.\n@mixin exo-cell-reset($vertical: true) {\n  $direction: if($vertical == true, width, height);\n  #{$direction}: auto;\n  max-#{$direction}: none;\n}\n\n// Sets our cell widths or heights depending on gutter type.\n@mixin -exo-cell-properties($size, $margin-gutter, $vertical) {\n  $direction: if($vertical == true, height, width);\n  @if($size == 'full') {\n    $val: if($margin-gutter == 0, 100%, calc(100% - #{rem-calc($margin-gutter)}));\n    #{$direction}: $val;\n  }\n  @else if ($size == 'auto') {\n    #{$direction}: auto;\n    $val: if($margin-gutter == 0, 100%, calc(100% - #{rem-calc($margin-gutter)}));\n  }\n  @else if ($size == 'shrink') {\n    #{$direction}: auto;\n  }\n  @else {\n    $val: if($margin-gutter == 0, #{exo-cell-size($size)}, calc(#{exo-cell-size($size)} - #{rem-calc($margin-gutter)}));\n    #{$direction}: $val;\n  }\n}\n\n/// Creates a cell for your grid.\n///\n/// @param {Keyword|Number} $size [full] - The size of your cell. Can be `full` (default) for 100% width, `auto` to use up available space and `shrink` to use up only required space.\n/// @param {List} $gutter-position [right left] - The position to apply gutters to. Accepts `top`, `bottom`, `left`, `right` in any combination.\n/// @param {Boolean} $gutter-output [true] - Whether or not to output gutters\n/// @param {Number|Map} $gutters [$grid-margin-gutters] - Map or single value for gutters.\n/// @param {Keyword} $gutter-type [margin] - Map or single value for gutters.\n/// @param {String} $breakpoint [null] - The name of the breakpoint size in your gutters map to get the size from. If using with the `breakpoint()` mixin this will be set automatically unless manually entered.\n/// @param {Boolean} $vertical [false] - Set to true to output vertical (height) styles rather than widths.\n@mixin exo-cell(\n  $size: full,\n  $gutter-position: right left,\n  $gutter-type: margin,\n  $gutter-output: true,\n  $gutters: $grid-margin-gutters,\n  $breakpoint: null,\n  $vertical: false\n) {\n  $gutter: exo-gutters-value($gutter-position, $gutter-type, $gutters, $breakpoint);\n  @if($gutter != null) {\n    // Base flex properties\n    @include exo-cell-base($size);\n\n    @if($gutter-type == 'margin') {\n      @include -exo-cell-properties($size, $gutter, $vertical);\n    }\n    @else {\n      @include -exo-cell-properties($size, 0, $vertical);\n    }\n\n    @if $gutter-output {\n      @include exo-gutters-set($gutter, $gutter-type, $gutter-position);\n    }\n  }\n  @else {\n    @warn 'exo-cell: no gutters were found in `$gutters` for \"$breakpoint: {$breakpoint}\", cell was not generated`';\n  }\n}\n\n@mixin exo-gutters(\n  $gutter-position: right left,\n  $gutter-type: margin,\n  $gutters: $grid-margin-gutters,\n  $breakpoint: null,\n  $negative: false\n) {\n  $gutter: exo-gutters-value($gutter-position, $gutter-type, $gutters, $breakpoint);\n  @include exo-gutters-set($gutter, $gutter-type, $gutter-position, $negative);\n}\n\n/// Creates a single breakpoint sized grid. Used to generate our grid classes.\n///\n/// @param {Keyword|Number} $size [full] - The size of your cell. Can be `full` (default) for 100% width, `auto` to use up available space and `shrink` to use up only required space.\n/// @param {Boolean} $gutter-output [true] - Whether or not to output gutters\n/// @param {Number|Map} $gutters [$grid-margin-gutters] - Map or single value for gutters.\n/// @param {Keyword} $gutter-type [margin] - Map or single value for gutters.\n/// @param {String} $breakpoint [null] - The name of the breakpoint size in your gutters map to get the size from. If using with the `breakpoint()` mixin this will be set automatically unless manually entered.\n/// @param {Boolean} $vertical [false] - Set to true to output vertical (height) styles rather than widths.\n@mixin exo-cell-static(\n  $size: full,\n  $gutter-output: true,\n  $gutters: $grid-margin-gutters,\n  $gutter-type: margin,\n  $breakpoint: $-exo-zero-breakpoint,\n  $vertical: false\n) {\n\n  $gutter: -exo-get-bp-val($gutters, $breakpoint);\n  $gutter-position: if($vertical == true, top bottom, left right);\n\n  @if($gutter-type == 'margin') {\n    @include -exo-cell-properties($size, $gutter, $vertical);\n  }\n  @else {\n    @include -exo-cell-properties($size, 0, $vertical);\n  }\n\n  // If we want to output the gutters\n  @if($gutter-output) {\n    // TODO: Figure out if we need to pass breakpoint in here too.\n    @include exo-gutters-set($gutter, $gutter-type, $gutter-position);\n  }\n}\n\n/////////////////////\n// Exo Grid - Frame\n// ---------\n\n/// Modifies a grid to give it \"frame\" behavior (no overflow, no wrap, stretch behavior)\n///\n/// @param {Boolean} $vertical [false] - Is grid vertical or horizontal. Should match grid.\n/// @param {Boolean} $nested [false] - Is grid nested or not. If nested is true this sets the frame to 100% height, otherwise will be 100vh.\n/// @param {Number|Map} $gutters [null] - Map or single value for gutters.\n/// @param {String} $breakpoint [null] - The name of the breakpoint size in your gutters map to get the size from.\n/// @param {Boolean} $include-base [true] - Include the base styles that don't vary per breakpoint.\n@mixin exo-grid-frame(\n  $vertical: false,\n  $nested: false,\n  $gutters: null,\n  $breakpoint: null,\n  $include-base: true\n) {\n\n  @if $include-base {\n    overflow: hidden;\n    position: relative;\n    flex-wrap: nowrap;\n    align-items: stretch;\n  }\n\n  @if $breakpoint == null and type-of($gutters) == 'map' {\n    @include -exo-each-breakpoint() {\n      @include exo-grid-frame($vertical, $nested, $gutters, $-exo-size, false);\n    }\n  } @else {\n    // Get our gutters if applicable\n    $gutter: -exo-get-bp-val($gutters, $breakpoint);\n\n    // If we have a gutter, add it to the width/height\n    @if $gutter {\n      @if $vertical == true {\n        $unit: if($nested == true, 100%, 100vh);\n        $gutter: rem-calc($gutter);\n        height: calc(#{$unit} + #{$gutter});\n      } @else {\n        $unit: if($nested == true, 100%, 100vw);\n        $gutter: rem-calc($gutter);\n        width: calc(#{$unit} + #{$gutter});\n      }\n    }\n    @else {\n      @if $vertical == true {\n        height: if($nested == true, 100%, 100vh);\n      } @else {\n        width: if($nested == true, 100%, 100vw);\n      }\n    }\n  }\n}\n\n/// Modifies a cell to give it \"block\" behavior (overflow auto, inertial scrolling)\n///\n/// @param {Boolean} $vertical [false] - Is grid vertical or horizontal. Should match grid.\n@mixin exo-cell-block(\n  $vertical: false\n) {\n  $property: if($vertical == true, 'overflow-y', 'overflow-x');\n\n  @if $vertical == true {\n    overflow-y: auto;\n    max-height: 100%;\n    min-height: 100%;\n  } @else {\n    overflow-x: auto;\n    max-width: 100%;\n  }\n\n  -webkit-overflow-scrolling: touch;\n  -ms-overflow-style: -ms-autohiding-scrollbar;\n}\n\n/// Container for inside a grid frame containing multiple blocks. Typically used\n/// as a modifier for a `.cell` to allow the cell to pass along flex sizing\n/// constraints / from parents to children.\n@mixin exo-cell-block-container() {\n  display: flex;\n  flex-direction: column;\n  max-height: 100%;\n\n  > .grid-x {\n    max-height: 100%;\n    flex-wrap: nowrap;\n  }\n}\n\n/////////////////////\n// Exo Grid - Position\n// ---------\n/// Offsets a column to the right/bottom by `$n` columns.\n///\n/// @param {Number|List} $n - Size to offset by. You can pass in any value accepted by the `exo-cell()` mixin, such as `6`, `50%`, or `1 of 2`.\n/// @param {Number|Map} $gutters [$grid-margin-gutters] Map of gutters or single value to use for responsive gutters.\n/// @param {Keyword} $gutter-type [margin] The type of gutter to use. Can be `margin` or `padding`\n/// @param {Number|Array|Keyword} $breakpoint [$-exo-zero-breakpoint] - Single value, breakpoint name, or list of breakpoint names to use for `$gutters`. See `-exo-breakpoint-value()`.\n/// @param {Boolean} $vertical [false] Sets the direction of the offset. If set to true will apply margin-top instead.\n@mixin exo-cell-offset(\n  $n,\n  $gutters: $grid-margin-gutters,\n  $gutter-type: margin,\n  $breakpoint: $-exo-zero-breakpoint,\n  $vertical: false\n) {\n  $direction: if($vertical, 'top', $global-left);\n\n  @include -exo-breakpoint-value($breakpoint, $gutters) {\n    $gutter: rem-calc($-exo-bp-value) * 0.5;\n    $gutter-margin: if($gutter-type == 'margin', $gutter, 0);\n    $size: if($gutter-margin == 0, #{exo-cell-size($n)}, calc(#{exo-cell-size($n)} + #{$gutter-margin}));\n\n    margin-#{$direction}: #{$size};\n  }\n}\n\n/////////////////////\n// Exo Grid - Layout\n// ---------\n/// Sizes child elements so that `$n` number of items appear on each row.\n///\n/// @param {Number} $n - Number of elements to display per row.\n/// @param {String} $selector ['.cell'] - Selector(s) to use for child elements.\n/// @param {Boolean} $gutter-output [true] - Whether or not to output gutters\n/// @param {Number|Map} $gutters [$grid-margin-gutters] - Map or single value for gutters.\n/// @param {Keyword} $gutter-type [margin] - Type of gutter to output. Accepts `margin` or `padding`.\n/// @param {List} $gutter-position [right left] - The position to apply gutters to. Accepts `top`, `bottom`, `left`, `right` in any combination.\n/// @param {String} $breakpoint [null] - The breakpoint to use for the cell generation.\n/// @param {Boolean} $vertical [false] - Set to true to output vertical (height) styles rather than widths.\n@mixin exo-grid-layout(\n  $n,\n  $selector: '.cell',\n  $gutter-output: true,\n  $gutters: $grid-margin-gutters,\n  $gutter-type: margin,\n  $gutter-position: right left,\n  $breakpoint: null,\n  $vertical: false\n) {\n  $size: percentage(math.div(1, $n));\n\n  & > #{$selector} {\n    @include exo-cell($size, $gutter-output, $gutters, $gutter-type, $gutter-position, $breakpoint, $vertical);\n  }\n}\n\n/////////////////////\n// Exo Grid - Collapse\n// ---------\n/// Collapses the grid a cells within it.\n///\n/// @param {String} $selector [.cell] - The child element to remove the gutter from.\n/// @param {Keyword} $gutter-type [margin] - The type of gutter to remove.\n/// @param {List} $gutter-position [right left] - The positions to remove gutters from. Accepts `top`, `bottom`, `left`, `right` in any combination.\n/// @param {Keyword} $min-breakpoint [$-exo-zero-breakpoint] - Minimum breakpoint in `$breakpoint-classes` for which to collapse the gutter.\n@mixin exo-grid-collapse(\n  $selector: '.cell',\n  $gutter-type: margin,\n  $gutter-position: right left,\n  $min-breakpoint: $-exo-zero-breakpoint\n) {\n  // First, lets negate any margins on the top level\n  @if ($gutter-type == 'margin') {\n\n    @include breakpoint($min-breakpoint) {\n      @each $value in $gutter-position {\n        margin-#{$value}: 0;\n      }\n\n      > #{$selector} {\n        @each $value in $gutter-position {\n          margin-#{$value}: 0;\n        }\n      }\n    }\n\n    $excluded-bps: -exo-breakpoints-less-than($min-breakpoint);\n\n    // Output new widths to not include gutters\n    @each $bp in $breakpoint-classes {\n      @if(sl-contain($excluded-bps, $bp)) {\n        @include breakpoint($min-breakpoint) {\n          @for $i from 1 through $grid-columns {\n            // Sizing (percentage)\n            > .#{$bp}-#{$i} {\n              @include exo-cell-static($i, $gutter-output: false, $gutter-type: padding);\n            }\n          }\n        }\n      } @else {\n        @include breakpoint($bp) {\n          @for $i from 1 through $grid-columns {\n            // Sizing (percentage)\n            > .#{$bp}-#{$i} {\n              @include exo-cell-static($i, $gutter-output: false, $gutter-type: padding);\n            }\n          }\n        }\n      }\n    }\n  }\n  @else {\n\n    @include breakpoint($min-breakpoint) {\n      @each $value in $gutter-position {\n        margin-#{$value}: 0;\n      }\n\n      > #{$selector} {\n        @each $value in $gutter-position {\n          padding-#{$value}: 0;\n        }\n      }\n    }\n  }\n}\n\n/////////////////////\n// Exo Grid - Classes\n// ---------\n// Not sure that these are needed or not yet for our use case.\n"]}