<?php

/**
 * @file
 * Contains exo_imagine.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\file\FileInterface;

/**
 * Implements hook_help().
 */
function exo_imagine_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the exo_imagine module.
    case 'help.page.exo_imagine':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Improved responsive image handler along with other image enhancements.') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_theme().
 */
function exo_imagine_theme() {
  return [
    'exo_imagine' => [
      'variables' => [
        'item' => NULL,
        'attributes' => [],
        'tag' => 'div',
        'url' => NULL,
        'image_picture_attributes' => [],
        'image_attributes' => [],
        'image_sources' => [],
        'preview_picture_attributes' => [],
        'preview_attributes' => [],
        'preview_sources' => [],
      ],
    ],
  ];
}

/**
 * Implements hook_theme().
 */
function template_preprocess_exo_imagine(&$variables) {
  if (!empty($variables['url'])) {
    $variables['tag'] = 'a';
    $variables['attributes']['href'] = $variables['url']->toString();
  }
}

/**
 * Implements hook_file_move().
 */
function exo_imagine_file_move(FileInterface $file, FileInterface $source) {
  // Delete any image derivatives at the original image path.
  exo_imagine_path_flush($source->getFileUri());
}

/**
 * Implements hook_ENTITY_TYPE_predelete() for file entities.
 */
function exo_imagine_file_predelete(FileInterface $file) {
  // Delete any image derivatives of this image.
  exo_imagine_path_flush($file->getFileUri());
}

/**
 * Clears cached versions of a specific file in all styles.
 *
 * @param $path
 *   The Drupal file path to the original image.
 */
function exo_imagine_path_flush($path) {
  /** @var \Drupal\exo_imagine\ExoImagineManager $manager */
  $manager = \Drupal::service('exo_imagine.manager');
  $styles = $manager->getImagineStyles();
  foreach ($styles as $style) {
    $style->getStyle()->flush($manager->toWebpUri($path));
  }
}
