<?php

/**
 * @file
 * Contains exo_imagine.module.
 */

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Config\Entity\ConfigEntityInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\exo_imagine\ExoImagineManager;
use Drupal\file\FileInterface;

/**
 * Implements hook_help().
 */
function exo_imagine_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the exo_imagine module.
    case 'help.page.exo_imagine':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Improved responsive image handler along with other image enhancements.') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_theme().
 */
function exo_imagine_theme() {
  return [
    'exo_imagine' => [
      'variables' => [
        'item' => NULL,
        'attributes' => [],
        'tag' => 'div',
        'url' => NULL,
        'image_picture_attributes' => [],
        'image_attributes' => [],
        'image_sources' => [],
        'preview_picture_attributes' => [],
        'preview_attributes' => [],
        'preview_sources' => [],
      ],
    ],
  ];
}

/**
 * Implements hook_theme().
 */
function template_preprocess_exo_imagine(&$variables) {
  if (!empty($variables['url'])) {
    $variables['tag'] = 'a';
    $variables['attributes']['href'] = $variables['url']->toString();
  }
}

/**
 * Implements hook_file_move().
 */
function exo_imagine_file_move(FileInterface $file, FileInterface $source) {
  // Delete any image derivatives at the original image path.
  exo_imagine_path_flush($source->getFileUri());
}

/**
 * Implements hook_entity_update().
 *
 * Saves the focal point value for the image file entity about to be saved.
 */
function exo_imagine_entity_update(EntityInterface $entity) {
  // Support crop module.
  if ($entity->getEntityTypeId() === 'crop') {
    $webp = \Drupal::service('exo_imagine.settings')->getSetting('webp');
    if ($webp) {
      /** @var \Drupal\crop\CropInterface $entity */
      $uri = $entity->get('uri')->value;
      $webp_uri = ExoImagineManager::toWebpUri($uri);
      image_path_flush($webp_uri);
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_predelete() for file entities.
 */
function exo_imagine_file_predelete(FileInterface $file) {
  // Delete any image derivatives of this image.
  exo_imagine_path_flush($file->getFileUri());
}

/**
 * Clears cached versions of a specific file in all styles.
 *
 * @param $path
 *   The Drupal file path to the original image.
 */
function exo_imagine_path_flush($path) {
  /** @var \Drupal\exo_imagine\ExoImagineManager $manager */
  $manager = \Drupal::service('exo_imagine.manager');
  $styles = $manager->getImagineStyles();
  foreach ($styles as $style) {
    $style->getStyle()->flush($manager->toWebpUri($path));
  }
}

/**
 * Implements hook_ENTITY_TYPE_access().
 */
function exo_imagine_image_style_access(ConfigEntityInterface $entity, $operation, AccountInterface $account) {
  if ($operation == 'delete') {
    if (substr($entity->id(), 0, 6) === 'exoimg') {
      $settings = \Drupal::service('exo_imagine.settings');
      if ($settings->getSetting(['lock', $entity->id()])) {
        return AccessResult::forbidden('Image style is locked.');
      }
    }
  }
  return AccessResult::neutral();
}
