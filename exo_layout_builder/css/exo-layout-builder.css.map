{"version":3,"sources":["exo_layout_builder/src/ExoThemeProvider/ExoLayoutBuilder/scss/base/_global.scss","../../Sites/augustAsh/glad-v2/web/modules/contrib/exo/exo/src/scss/base/_variables.scss","../../Sites/augustAsh/glad-v2/web/modules/contrib/exo/exo/src/scss/base/_mixins.scss","../../Sites/augustAsh/glad-v2/web/modules/contrib/exo/exo/src/scss/util/_grid.scss","../../Sites/augustAsh/glad-v2/web/modules/contrib/exo/exo/src/scss/util/_flex.scss"],"names":[],"mappings":"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","file":"exo-layout-builder.css","sourcesContent":[".exo-layout-builder {\n\n  &.layout-builder {\n    display: block;\n    padding: $global-padding;\n    border: 0;\n  }\n\n  .exo-form-element-type-vertical-tabs {\n    position: fixed;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    z-index: 905;\n    text-align: center;\n    pointer-events: none;\n    margin-bottom: 0 !important;\n\n    > .exo-form-vertical-tabs {\n      display: inline-block;\n      margin: 0 auto;\n      background: gray(80);\n      border-top: 1px solid gray(50);\n      border-top: 0;\n      border-radius: 5px 5px 0 0;\n      box-shadow: 0 0 20px alpha(theme-black, 0.4);\n      pointer-events: auto;\n    }\n\n    .exo-form-container-revision {\n      margin: 0;\n    }\n\n    .vertical-tabs__menu {\n      display: none;\n    }\n\n    .vertical-tabs__panes {\n      background: transparent !important;\n      border: 0 !important;\n\n      .vertical-tabs__pane {\n        padding: $global-padding * 0.5 !important;\n      }\n    }\n\n    .exo-form-checkbox {\n\n      label.option {\n        font-weight: 700;\n        font-size: rem-calc(12);\n        text-transform: uppercase;\n        color: gray(0) !important;\n      }\n    }\n  }\n\n  .exo-layout-builder-top {\n    position: fixed;\n    top: 0;\n    left: 0;\n    right: 0;\n    z-index: 905;\n    text-align: center;\n    pointer-events: none;\n\n    .exo-layout-builder-top-inner {\n      display: inline-block;\n      margin: 0 auto;\n      background: gray(80);\n      border-bottom: 1px solid gray(50);\n      border-top: 0;\n      border-radius: 0 0 5px 5px;\n      box-shadow: 0 0 20px alpha(theme-black, 0.4);\n      pointer-events: auto;\n\n      .exo-form-element {\n        margin: 0;\n      }\n\n      .form-actions,\n      .exo-form {\n        display: flex;\n        align-items: center;\n        justify-content: space-around;\n        padding: $global-padding * 0.5;\n        margin: 0;\n\n        > * {\n          margin: 0 $global-margin * 0.25;\n        }\n\n        .button {\n          font-size: rem-calc(12);\n          border-radius: 3px;\n          transition: background-color $global-speed;\n          border: 0;\n          padding: $global-padding;\n\n          &.exo-layout-builder-submit {\n            font-weight: 700;\n          }\n        }\n\n        .toggle-content-preview {\n\n          label.option {\n            font-weight: 700;\n            font-size: rem-calc(12);\n            text-transform: uppercase;\n            color: gray(0);\n          }\n        }\n      }\n    }\n\n    .layout-builder__message {\n      display: none;\n      margin: 0;\n\n      .messages {\n        font-size: rem-calc(11);\n        background: color(theme-success);\n        padding: rem-calc(5 10);\n        margin: 0;\n      }\n    }\n  }\n\n  .layout-builder__section {\n    margin: 0 !important;\n\n    .layout-builder__region {\n      outline: none;\n    }\n\n    > .layout-builder__info,\n    > .layout-builder__link {\n      display: inline-block;\n      height: auto;\n      width: auto;\n      margin: 0;\n      border: 0;\n      font-size: rem-calc(12);\n      line-height: rem-calc(12);\n      padding: rem-calc(5);\n      margin-bottom: $global-margin * 0.5;\n      vertical-align: bottom;\n    }\n\n    > .layout-builder__info {\n      background-color: gray(50);\n      text-transform: uppercase;\n      font-size: rem-calc(10);\n      color: gray(0);\n      border-radius: $global-radius;\n\n      &.layout-builder__info--alert {\n        background-color: color(theme-alert);\n      }\n\n      &.layout-builder__info--warning {\n        background-color: color(theme-warning);\n      }\n    }\n\n    > .layout-builder__link {\n      overflow: hidden;\n      background-color: gray(80);\n      background-image: none;\n      color: gray(0);\n      text-indent: 0;\n      overflow: hidden;\n      text-shadow: none;\n      border-radius: 0;\n      transition: background-color $global-speed;\n\n      &:first-of-type {\n        border-radius: $global-radius 0 0 $global-radius;\n      }\n\n      &:last-of-type {\n        border-radius: 0 $global-radius $global-radius 0;\n      }\n\n      &:hover,\n      &:active,\n      &:focus {\n        background-image: none;\n        color: gray(0);\n        background-color: gray(70);\n      }\n    }\n\n    .layout-builder__add-block {\n      padding: 0;\n      margin: 0;\n      background: none;\n    }\n  }\n\n  .layout-builder__link--add {\n    @include exo-icon('regular', f055) {\n      padding-right: rem-calc(5);\n    };\n    display: block;\n    padding: $global-padding;\n    margin: $global-padding * 0.5 0 0;\n    background-image: none;\n    font-size: rem-calc(14);\n    // text-transform: uppercase;\n    font-weight: 400;\n    transition: color $global-speed;\n    background-color: gray(15);\n    color: gray(80);\n    transition: background-color $global-speed;\n    border-radius: $global-radius;\n\n    em {\n      font-weight: 700;\n      font-style: normal;\n    }\n\n    &:hover,\n    &:active,\n    &:focus {\n      background-color: gray(25);\n    }\n  }\n\n  .layout-builder__add-section {\n    border: 0;\n    outline: none;\n    padding: 0;\n    margin: 0 $global-margin * 0.5 $global-margin * 0.5;\n    width: auto;\n\n    .layout-builder__link--add {\n      background-color: gray(5);\n      padding: $global-padding;\n      margin: $global-padding * 0.5 0;\n\n      &:hover,\n      &:active,\n      &:focus {\n        background-color: gray(15);\n      }\n      // border: 1px solid alpha(theme-gray, 0.3);\n      // outline: none;\n      // // outline: 1px dashed color(theme-gray);\n      // background-color: alpha(theme-gray, 0.1);\n    }\n  }\n}\n\n.layout-selection {\n  @include exo-grid;\n  @include exo-gutters(top right bottom left, $negative: true);\n  padding: 0;\n  list-style: none;\n\n  > li {\n    @include exo-cell(6, top right bottom left);\n    @include flex;\n    text-align: center;\n\n    a {\n      @include flex;\n      @include flex-align(center, middle);\n      flex-direction: column;\n      padding: $global-padding;\n      height: 100%;\n      width: 100%;\n      font-size: rem-calc(12);\n      text-transform: uppercase;\n    }\n  }\n}\n\n.exo-content .layout-builder-discard-changes,\n.exo-content .layout-builder-revert-overrides {\n  max-width: rem-calc(500);\n  margin: $global-margin * 4 auto;\n  background: color(theme-white);\n  box-shadow: 0 0 30px alpha(theme-black, 0.2);\n  padding: $global-padding * 2;\n  text-align: center;\n\n  .form-actions {\n    @include flex;\n    @include flex-align(center, middle);\n    margin-top: $global-margin;\n\n    .button {\n      display: block !important;\n      background: gray(55) !important;\n      color: gray(0) !important;\n      padding: $global-padding !important;\n      transition: background-color $global-speed !important;\n      text-align: center !important;\n      border: 0 !important;\n      box-shadow: 0 0 10px alpha(gray(100), 0.3) !important;\n      height: auto !important;\n\n      &.button--primary {\n        background: gray(70) !important;\n      }\n\n      &:hover,\n      &:active,\n      &:focus {\n        color: gray(0) !important;\n        background: gray(60) !important;\n      }\n    }\n  }\n}\n\n.exo-fixed {\n\n  > .exo-fixed-region {\n    position: static !important;\n  }\n}\n","////////////////////////////////////////////////////////////////////////////////\n/// Colors\n////////////////////////////////////////////////////////////////////////////////\n\n$global-colors: (\n  theme-black: #1a1a1a,\n  theme-white: #fff,\n  theme-gray: #777,\n  theme-base: #373a3c,\n  theme-offset: #f1f1f1,\n  theme-primary: #2780e3,\n  theme-secondary: #b6bf3d,\n  theme-success: #86c13d,\n  theme-warning: #f1ba2e,\n  theme-alert: #e54040,\n) !default;\n\n// Themes will add colors to this variable.\n$colors: () !default;\n\n////////////////////////////////////////////////////////////////////////////////\n/// Globals\n////////////////////////////////////////////////////////////////////////////////\n$global-speed: 350ms;\n$global-radius: 3px;\n$global-font-size: 100%;\n$global-lineheight: 1.5;\n$global-speed: 350ms;\n$global-radius: 3px;\n$global-menu-padding: 0.7rem 1rem !default;\n$menu-items-padding: $global-menu-padding !default;\n$body-antialiased: true;\n$global-margin: 1rem;\n$global-padding: 1rem;\n$global-position: 1rem;\n$global-weight-normal: normal;\n$global-weight-bold: bold;\n$global-width: rem-calc(1100);\n$grid-row-width: $global-width;\n$grid-container: $global-width;\n\n/// Sets the text direction of the CSS. Can be either `ltr` or `rtl`.\n/// @type Keyword\n$global-text-direction: ltr !default;\n$global-left: if($global-text-direction == rtl, right, left);\n$global-right: if($global-text-direction == rtl, left, right);\n\n// Internal variable that contains the flex justifying options\n$-exo-flex-justify: -exo-flex-justify($global-text-direction);\n\n$sizes: (\n  margin: rem-calc(30),\n  padding: rem-calc(30),\n  font: rem-calc(16),\n);\n\n/// Global tolerance for color pick contrast.\n/// @type Number\n$global-color-pick-contrast-tolerance: 0 !default;\n$contrast-warnings: true !default;\n","/////////////////////\n// Font Face\n// Generates the proper font styles from a linked font file(s)\n// ---------\n@use \"sass:math\";\n\n@mixin font-face($name, $path, $weight: null, $style: null, $exts: eot woff2 woff ttf svg) {\n  $src: null;\n\n  $extmods: (\n    eot: '?',\n    svg: '#' + str-replace($name, ' ', '_')\n  );\n\n  $formats: (\n    otf: 'opentype',\n    ttf: 'truetype'\n  );\n\n  @each $ext in $exts {\n    $extmod: if(map-has-key($extmods, $ext), $ext + map-get($extmods, $ext), $ext);\n    $format: if(map-has-key($formats, $ext), map-get($formats, $ext), $ext);\n    $src: append($src, url(quote($path + '.' + $extmod)) format(quote($format)), comma);\n  }\n\n  @font-face {\n    font-family: quote($name);\n    font-style: $style;\n    font-weight: $weight;\n    src: $src;\n    font-display: swap;\n  }\n}\n\n/////////////////////\n// Use icon\n\n@function add-backslash($character) {\n  @return unquote('\"') + unquote(str-insert($character, '\\\\', 1)) + unquote('\"');\n}\n\n@mixin exo-icon($package, $hex, $position: before) {\n  &:#{$position} {\n    -webkit-font-smoothing: antialiased; // sass-lint:disable-line no-vendor-prefixes\n    -moz-osx-font-smoothing: grayscale; // sass-lint:disable-line no-vendor-prefixes\n    font-family: 'icon-#{$package}' !important; // stylelint-disable-line declaration-no-important\n    display: inline-block;\n    font-style: normal;\n    font-variant: normal;\n    font-weight: normal;\n    line-height: 1;\n    content: add-backslash($hex);\n    @content;\n  }\n}\n\n/////////////////////\n// Sass CSS triangle mixin, create any kind of triangles with ease\n//\n// Use:\n// @include triangle(direction,width,height,color);\n//\n// Example:\n// $square: 50px;\n// $color: red;\n// selector {\n// *\t @include triangle(bottomright,$square,$square,$color);\n// }\n//\n// Forked from https://github.com/juanbrujo/triangle-mixin.less\n@mixin exo-triangle($direction, $size-h, $size-v, $color) {\n  content: '';\n  display: inline-block;\n  width: 0;\n  height: 0;\n  border-style: solid;\n  transform: scale(0.9999);\n  vertical-align: middle;\n\n  @if $direction == top {\n    border-width: 0 $size-v $size-h;\n    border-color: transparent transparent $color;\n  }\n  @if $direction == bottom {\n    border-width: $size-v $size-h 0 $size-v;\n    border-color: $color transparent transparent;\n  }\n  @if $direction == left {\n    border-width: $size-v $size-h $size-v 0;\n    border-color: transparent $color transparent transparent;\n  }\n  @if $direction == right {\n    border-width: $size-v 0 $size-v $size-h;\n    border-color: transparent transparent transparent $color;\n  }\n  @if $direction == topright {\n    border-width: 0 $size-h $size-v 0;\n    border-color: transparent $color transparent transparent;\n  }\n  @if $direction == bottomright {\n    border-width: 0 0 $size-h $size-v;\n    border-color: transparent transparent $color;\n  }\n  @if $direction == bottomleft {\n    border-width: $size-h 0 0 $size-v;\n    border-color: transparent transparent transparent $color;\n  }\n  @if $direction == topleft {\n    border-width: $size-h $size-v 0 0;\n    border-color: $color transparent transparent;\n  }\n  @content;\n}\n\n/////////////////////\n// Breakpoints\n// --------\n/// Iterates through breakpoints defined in `$breakpoint-classes` and prints the CSS inside the mixin at each breakpoint's media query. Use this with the grid, or any other component that has responsive classes.\n///\n/// @param {Boolean} $small [true] - If `false`, the mixin will skip the `small` breakpoint. Use this with components that don't prefix classes with `small-`, only `medium-` and up.\n/// @param {Boolean} $auto-insert-breakpoints [true] - If `false`, the mixin will iterate over breakpoints without doing the media query itself. Useful for more complex media query generation as in the margin grid.\n@mixin exo-each-breakpoint($small: true, $auto-insert-breakpoints: true) {\n  $list: $breakpoint-classes;\n\n  @if not $small {\n    $list: sl-remove($list, $-zf-zero-breakpoint);\n  }\n\n  @each $name in $list {\n    $old-exo-size: null;\n    @if global-variable-exists(exo-size) {\n      $old-exo-size: $exo-size;\n    }\n    $exo-size: $name !global;\n\n    @if $auto-insert-breakpoints {\n      @include breakpoint($name) {\n        @content;\n      }\n    }\n    @else {\n      @content;\n    }\n\n    $exo-size: $old-exo-size !global;\n  }\n}\n\n@mixin exo-progress-throbber() {\n  .ajax-progress-throbber {\n    position: fixed !important;\n    top: 0 !important;\n    left: 0 !important;\n    right: 0 !important;\n    bottom: 0 !important;\n    background: alpha(theme-black, 0.2) !important;\n    z-index: 1000 !important;\n\n    .throbber {\n      position: fixed !important;\n      top: 50% !important;\n      right: 50% !important;\n      bottom: 50% !important;\n      left: 50% !important;\n      width: 16px !important;\n      height: 16px !important;\n      margin-top: -8px !important;\n      margin-left: -8px !important;\n      text-align: center !important;\n      background-color: color(theme-white) !important;\n      background-position: center center !important;\n      border-radius: 50% !important;\n      padding: $global-padding !important;\n    }\n\n    .message {\n      display: none;\n    }\n  }\n}\n\n/////////////////////\n// Exo Breakpoint Mixin\n// ---------\n/// Generate the `@content` passed to the mixin with a value `$-zf-bp-value` related to a breakpoint, depending on the `$name` parameter:\n/// - For a single value, `$-zf-bp-value` is this value.\n/// - For a breakpoint name, `$-zf-bp-value` is the corresponding breakpoint value in `$map`.\n/// - For \"auto\", `$-zf-bp-value` is the corresponding breakpoint value in `$map` and is passed to `@content`, which is made responsive for each breakpoint of `$map`.\n/// @param {Number|Array|Keyword} $name [auto] - Single value, breakpoint name, or list of breakpoint names to use. \"auto\" by default.\n/// @param {Number|Map} $map - Map of breakpoints and values or single value to use.\n@mixin -exo-breakpoint-value(\n  $name: auto,\n  $map: null\n) {\n  @if $name == auto and type-of($map) == 'map' {\n    // \"auto\"\n    @each $k, $v in $map {\n      @include breakpoint($k) {\n        @include -exo-breakpoint-value($v, $map) {\n          @content;\n        }\n      }\n    }\n  }\n  @else {\n    // breakpoint name\n    @if type-of($name) == 'string' {\n      $name: -exo-get-bp-val($map, $name);\n    }\n\n    // breakpoint value\n    $-exo-bp-value: $name !global;\n    @content;\n  }\n}\n\n/// Removes the focus ring around an element when a mouse input is detected.\n@mixin disable-mouse-outline {\n  [data-whatinput='mouse'] & {\n    outline: 0;\n  }\n}\n\n/// Applies the micro clearfix hack popularized by Nicolas Gallagher. Include this mixin on a container if its children are all floated, to give the container a proper height.\n/// The clearfix is augmented with specific styles to prevent borders in flexbox environments\n/// @link http://nicolasgallagher.com/micro-clearfix-hack/ Micro Clearfix Hack\n/// @link http://danisadesigner.com/blog/flexbox-clear-fix-pseudo-elements/ Flexbox fix\n@mixin clearfix {\n  &::before,\n  &::after {\n    display: table;\n    content: ' ';\n  }\n\n  &::after {\n    clear: both;\n  }\n}\n\n/////////////////////\n// Menu Base Mixin\n// --------\n/// Creates the base styles for a Menu.\n@mixin menu-base {\n  padding: 0;\n  margin: 0;\n  list-style: none;\n  position: relative;\n\n  li {\n    @include disable-mouse-outline;\n  }\n\n  a,\n  .button {\n    line-height: 1;\n    text-decoration: none;\n    display: block;\n    padding: $menu-items-padding;\n  }\n\n  // Reset styles of inner elements\n  input,\n  select,\n  a,\n  button {\n    margin-bottom: 0;\n  }\n\n  input {\n    display: inline-block;\n  }\n}\n\n/////////////////////\n// Touchscreen Mixin\n// --------\n/// Apply specific styles based on hover events detected for touchscreen\n/// where primary input is not a mouse.\n@mixin touchscreen() {\n  @media (hover: none) and (pointer: coarse) {\n    @content;\n  }\n}\n\n/////////////////////\n// IE Support Mixin\n// --------\n/// IE can be super fun and doesn't support some of the stuff we are trying to do.\n/// Use this mixin to pass IE specific styles.\n@mixin iesupport() {\n  @media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n    @content;\n  }\n}\n\n/*\n* Dotted Border - A SASS mixin to help you increase spacing between the dots of border-style:dotted.\n* By @florbraz\n* Documentation and examples - github.com/florbraz/Dotted-Border-w-custom-spacing-SCSS-Mixin\n* V1.0\n*/\n@mixin dottedBorder($color: #8f8f8f, $orientation: horizontal, $position: top, $spacing: 5px, $size: 1px) {\n  background-position: $position;\n  @if $orientation == horizontal {\n    background-image: linear-gradient(to right, $color math.div($size, $spacing) * 100%, rgba(255,255,255,0) 0%);\n    background-size: $spacing $size;\n    background-repeat: repeat-x;\n  }\n  @else {\n    background-image: linear-gradient($color math.div($size, $spacing) * 100%, rgba(255,255,255,0) 0%);\n    background-size: $size $spacing;\n    background-repeat: repeat-y;\n  }\n  .ie9 & {\n    border-#{$position}:1px dotted $color;\n  }\n}\n\n/**\n * Hide elements visually, but keep them available for screen readers.\n *\n * Used for information required for screen reader users to understand and use\n * the site where visual display is undesirable. Information provided in this\n * manner should be kept concise, to avoid unnecessary burden on the user.\n * \"!important\" is used to prevent unintentional overrides.\n */\n @mixin visually-hidden($focusable: false) {\n  position: absolute !important;\n  clip: rect(1px, 1px, 1px, 1px);\n  overflow: hidden;\n  height: 1px;\n  width: 1px;\n  word-wrap: normal;\n\n  /**\n   * The .focusable class extends the .visually-hidden class to allow\n   * the element to be focusable when navigated to via the keyboard.\n   */\n  @if $focusable {\n    &:active,\n    &:focus {\n      position: static !important;\n      clip: auto;\n      overflow: visible;\n      height: auto;\n      width: auto;\n    }\n  }\n}\n","@use \"sass:math\";\n\n/////////////////////\n// Exo Grid\n// ---------\n\n/////////////////////\n// Exo Grid Settings\n// ---------\n\n/// Enables the Exo-exo grid.\n/// @type Boolean\n$exo-grid: true !default;\n\n/// The maximum width of a grid container.\n/// @type Number\n$grid-container: $global-width !default;\n\n/// The number of columns used in the grid.\n/// @type Number\n$grid-columns: 12 !default;\n\n/// The amount of margin between cells at different screen sizes when using the margin grid. To use just one size, set the variable to a number instead of a map.\n/// @type Map | Length\n$grid-margin-gutters: $global-margin * 2 !default;\n\n/// The amount of padding in cells at different screen sizes when using the padding grid. To use just one size, set the variable to a number instead of a map.\n/// @type Map | Length\n$grid-padding-gutters: $grid-margin-gutters !default;\n\n/// The amount of padding to use when padding the grid-container.\n/// @type Map | Length\n$grid-container-padding: $grid-padding-gutters !default;\n\n/// The maximum width to apply to a grid container\n/// @type Number\n$grid-container-max: $global-width !default;\n\n/// The maximum number of cells in an Exo block grid.\n/// @type Number\n$exo-block-grid-max: 8 !default;\n\n/////////////////////\n// Exo Grid - Gutters\n// ---------\n\n/// Calculate gutter size.\n///\n/// @param {List} $gutter-position [right left] - The position to apply gutters to. Accepts `top`, `bottom`, `left`, `right` in any combination.\n/// @param {Boolean} $gutter-output [true] - Whether or not to output gutters\n/// @param {Number|Map} $gutters [$grid-margin-gutters] - Map or single value for gutters.\n/// @param {Keyword} $gutter-type [margin] - Map or single value for gutters.\n/// @param {String} $breakpoint [null] - The name of the breakpoint size in your gutters map to get the size from. If using with the `breakpoint()` mixin this will be set automatically unless manually entered.\n@function exo-gutters-value(\n  $gutter-position: right left,\n  $gutter-type: margin,\n  $gutters: $grid-margin-gutters,\n  $breakpoint: null\n) {\n  $bp-is-fallback: false;\n\n  @if ($breakpoint == null) {\n    // If `$bp-size` is available then use this, otherwise revert to the smallest bp.\n    @if(variable-exists(-exo-size) and type-of($-exo-size) != 'number') and $-exo-size != null {\n      $breakpoint: $-exo-size;\n    }\n    @else {\n      $breakpoint: $-exo-zero-breakpoint;\n      $bp-is-fallback: true;\n    }\n  }\n\n  // Get the gutter for the given breakpoint/value.\n  $gutter: -exo-get-bp-val($gutters, $breakpoint);\n  // If the breakpoint is a fallback, use a fallback gutter as well\n  @if ($bp-is-fallback == true and $gutter == null) {\n    $gutter: 0;\n  }\n\n  @return $gutter;\n}\n\n/// Create gutters for a cell/container.\n///\n/// @param {Number|Map} $gutters [$grid-margin-gutters] - Map or single value for gutters.\n/// @param {Keyword} $gutter-type [margin] - Type of gutter to output. Accepts either margin or padding.\n/// @param {List} $gutter-position [right left] - The position to apply gutters to. Accepts `top`, `bottom`, `left`, `right` in any combination.\n/// @param {Boolean} $negative [false] - Whether to apply the gutter as a negative value. Commonly used for nested grids.\n@mixin exo-gutters-set(\n  $gutters: $grid-margin-gutters,\n  $gutter-type: margin,\n  $gutter-position: right left,\n  $negative: false\n) {\n  $operator: if($negative, '-', '');\n\n  // If we have declared negative gutters, force type to `margin.\n  $gutter-type: if($negative, 'margin', $gutter-type);\n\n  // Output our margin gutters.\n  @if (type-of($gutters) == 'map') {\n    @include -exo-breakpoint-value(auto, $gutters) {\n      $gutter: rem-calc($-exo-bp-value) * 0.5;\n\n      // Loop through each gutter position\n      @each $value in $gutter-position {\n        #{$gutter-type}-#{$value}: unquote('#{$operator}#{$gutter}');\n      }\n    }\n  }\n  @else if (type-of($gutters) == 'number') {\n    $gutter: math.div(rem-calc($gutters), 2);\n\n    // Loop through each gutter position\n    @each $value in $gutter-position {\n      #{$gutter-type}-#{$value}: unquote(\"#{$operator}#{$gutter}\");\n    }\n  }\n}\n\n/////////////////////\n// Exo Grid - Grid\n// ---------\n\n/// Creates a max width container, designed to house your grid content.\n///\n/// @param {Number} $width [$grid-container] - a width to limit the container to.\n/// @param {Number} $padding [$grid-container-padding] - paddings of the container.\n@mixin exo-grid-container(\n  $width: $grid-container,\n  $padding: $grid-container-padding\n) {\n  @include exo-gutters-set($gutters: $padding, $gutter-type: padding);\n\n  max-width: $width;\n  margin: 0 auto;\n}\n\n/////////////////////\n// Exo Grid - Nested Grid\n// ---------\n/// Creates a nested grid container, designed to house your grid content.\n///\n/// @param {Number} $width [$grid-container] - a width to limit the container to.\n/// @param {Number} $padding [$grid-container-padding] - paddings of the container.\n@mixin exo-grid-container-nested(\n  $width: $grid-container,\n  $padding: $grid-container-padding\n) {\n  @include exo-gutters-set($gutters: $padding, $gutter-type: margin, $gutter-position: left right, $negative: true);\n\n  max-width: $width;\n}\n\n/// Creates a container for your flex cells.\n///\n/// @param {Keyword} $direction [horizontal] - Either horizontal or vertical direction of cells within.\n/// @param {Boolean} $wrap [true] - If the cells within should wrap or not.\n@mixin exo-grid(\n  $direction: horizontal,\n  $wrap: true\n) {\n  $direction: if($direction == 'horizontal', row, column);\n  $wrap: if($wrap, wrap, nowrap);\n\n  display: flex;\n  flex-flow: $direction $wrap;\n}\n\n/////////////////////\n// Exo Grid - Cell\n// ---------\n\n/// Calculate the percentage size of a cell.\n///\n/// @param {Number|List} $size [$grid-columns] - Size to make the cell. You can pass a value in multiple formats, such as `6`, `50%`, `1 of 2` or `1/3`.\n@function exo-cell-size(\n  $size: $grid-columns\n) {\n  // Parsing percents, decimals, n of n and number counts\n  @if type-of($size) == 'number' {\n    @if unit($size) == '%' {\n      $size: $size;\n    }\n    @else if $size < 1 {\n      $size: percentage($size);\n    }\n    @else {\n      $size: percentage(math.div($size, $grid-columns));\n    }\n  }\n\n  // Parsing \"n of n\" or \"n/n\" expressions\n  @else if type-of($size) == 'list' {\n    @if length($size) != 3 {\n      @error 'Wrong syntax for exo-cell-size(). Use the format \"n of n\" or \"n/n\".';\n    }\n    @else {\n      $size: percentage(math.div(nth($size, 1), nth($size, 3)));\n    }\n  }\n  // Anything else is incorrect\n  @else {\n    @error 'Wrong syntax for exo-cell-size(). Use a number, decimal, percentage, or \"n of n\" / \"n/n\".';\n  }\n\n  @return $size;\n}\n\n/// Sets base flex properties for cells.\n///\n/// @param {Keyword} $size [full] - The size of your cell. Accepts `full`, `auto`, `shrink` or `grow`.\n@mixin exo-cell-base($size: full) {\n  @if($size == 'full') {\n    // This is the base style, all others inherit from it\n    flex: 0 0 auto;\n    min-height: 0px; // sass-lint:disable-line zero-unit\n    min-width: 0px; // sass-lint:disable-line zero-unit\n  }\n  @else if ($size == 'auto') {\n    flex: 1 1 0px; // sass-lint:disable-line zero-unit\n  }\n  @else if ($size == 'shrink') {\n    flex: 0 0 auto;\n  }\n  @else if ($size == 'grow') {\n    flex: 1 0 auto;\n  }\n}\n\n/// Resets a cells width (or height if vertical is true) as well as strips its gutters.\n///\n/// @param {Boolean} $vertical [false] - Set to true to output vertical (height) styles rather than widths.\n@mixin exo-cell-reset($vertical: true) {\n  $direction: if($vertical == true, width, height);\n  #{$direction}: auto;\n  max-#{$direction}: none;\n}\n\n// Sets our cell widths or heights depending on gutter type.\n@mixin -exo-cell-properties($size, $margin-gutter, $vertical) {\n  $direction: if($vertical == true, height, width);\n  @if($size == 'full') {\n    $val: if($margin-gutter == 0, 100%, calc(100% - #{rem-calc($margin-gutter)}));\n    #{$direction}: $val;\n  }\n  @else if ($size == 'auto') {\n    #{$direction}: auto;\n    $val: if($margin-gutter == 0, 100%, calc(100% - #{rem-calc($margin-gutter)}));\n  }\n  @else if ($size == 'shrink') {\n    #{$direction}: auto;\n  }\n  @else {\n    $val: if($margin-gutter == 0, #{exo-cell-size($size)}, calc(#{exo-cell-size($size)} - #{rem-calc($margin-gutter)}));\n    #{$direction}: $val;\n  }\n}\n\n/// Creates a cell for your grid.\n///\n/// @param {Keyword|Number} $size [full] - The size of your cell. Can be `full` (default) for 100% width, `auto` to use up available space and `shrink` to use up only required space.\n/// @param {List} $gutter-position [right left] - The position to apply gutters to. Accepts `top`, `bottom`, `left`, `right` in any combination.\n/// @param {Boolean} $gutter-output [true] - Whether or not to output gutters\n/// @param {Number|Map} $gutters [$grid-margin-gutters] - Map or single value for gutters.\n/// @param {Keyword} $gutter-type [margin] - Map or single value for gutters.\n/// @param {String} $breakpoint [null] - The name of the breakpoint size in your gutters map to get the size from. If using with the `breakpoint()` mixin this will be set automatically unless manually entered.\n/// @param {Boolean} $vertical [false] - Set to true to output vertical (height) styles rather than widths.\n@mixin exo-cell(\n  $size: full,\n  $gutter-position: right left,\n  $gutter-type: margin,\n  $gutter-output: true,\n  $gutters: $grid-margin-gutters,\n  $breakpoint: null,\n  $vertical: false\n) {\n  $gutter: exo-gutters-value($gutter-position, $gutter-type, $gutters, $breakpoint);\n  @if($gutter != null) {\n    // Base flex properties\n    @include exo-cell-base($size);\n\n    @if($gutter-type == 'margin') {\n      @include -exo-cell-properties($size, $gutter, $vertical);\n    }\n    @else {\n      @include -exo-cell-properties($size, 0, $vertical);\n    }\n\n    @if $gutter-output {\n      @include exo-gutters-set($gutter, $gutter-type, $gutter-position);\n    }\n  }\n  @else {\n    @warn 'exo-cell: no gutters were found in `$gutters` for \"$breakpoint: {$breakpoint}\", cell was not generated`';\n  }\n}\n\n@mixin exo-gutters(\n  $gutter-position: right left,\n  $gutter-type: margin,\n  $gutters: $grid-margin-gutters,\n  $breakpoint: null,\n  $negative: false\n) {\n  $gutter: exo-gutters-value($gutter-position, $gutter-type, $gutters, $breakpoint);\n  @include exo-gutters-set($gutter, $gutter-type, $gutter-position, $negative);\n}\n\n/// Creates a single breakpoint sized grid. Used to generate our grid classes.\n///\n/// @param {Keyword|Number} $size [full] - The size of your cell. Can be `full` (default) for 100% width, `auto` to use up available space and `shrink` to use up only required space.\n/// @param {Boolean} $gutter-output [true] - Whether or not to output gutters\n/// @param {Number|Map} $gutters [$grid-margin-gutters] - Map or single value for gutters.\n/// @param {Keyword} $gutter-type [margin] - Map or single value for gutters.\n/// @param {String} $breakpoint [null] - The name of the breakpoint size in your gutters map to get the size from. If using with the `breakpoint()` mixin this will be set automatically unless manually entered.\n/// @param {Boolean} $vertical [false] - Set to true to output vertical (height) styles rather than widths.\n@mixin exo-cell-static(\n  $size: full,\n  $gutter-output: true,\n  $gutters: $grid-margin-gutters,\n  $gutter-type: margin,\n  $breakpoint: $-exo-zero-breakpoint,\n  $vertical: false\n) {\n\n  $gutter: -exo-get-bp-val($gutters, $breakpoint);\n  $gutter-position: if($vertical == true, top bottom, left right);\n\n  @if($gutter-type == 'margin') {\n    @include -exo-cell-properties($size, $gutter, $vertical);\n  }\n  @else {\n    @include -exo-cell-properties($size, 0, $vertical);\n  }\n\n  // If we want to output the gutters\n  @if($gutter-output) {\n    // TODO: Figure out if we need to pass breakpoint in here too.\n    @include exo-gutters-set($gutter, $gutter-type, $gutter-position);\n  }\n}\n\n/////////////////////\n// Exo Grid - Frame\n// ---------\n\n/// Modifies a grid to give it \"frame\" behavior (no overflow, no wrap, stretch behavior)\n///\n/// @param {Boolean} $vertical [false] - Is grid vertical or horizontal. Should match grid.\n/// @param {Boolean} $nested [false] - Is grid nested or not. If nested is true this sets the frame to 100% height, otherwise will be 100vh.\n/// @param {Number|Map} $gutters [null] - Map or single value for gutters.\n/// @param {String} $breakpoint [null] - The name of the breakpoint size in your gutters map to get the size from.\n/// @param {Boolean} $include-base [true] - Include the base styles that don't vary per breakpoint.\n@mixin exo-grid-frame(\n  $vertical: false,\n  $nested: false,\n  $gutters: null,\n  $breakpoint: null,\n  $include-base: true\n) {\n\n  @if $include-base {\n    overflow: hidden;\n    position: relative;\n    flex-wrap: nowrap;\n    align-items: stretch;\n  }\n\n  @if $breakpoint == null and type-of($gutters) == 'map' {\n    @include -exo-each-breakpoint() {\n      @include exo-grid-frame($vertical, $nested, $gutters, $-exo-size, false);\n    }\n  } @else {\n    // Get our gutters if applicable\n    $gutter: -exo-get-bp-val($gutters, $breakpoint);\n\n    // If we have a gutter, add it to the width/height\n    @if $gutter {\n      @if $vertical == true {\n        $unit: if($nested == true, 100%, 100vh);\n        $gutter: rem-calc($gutter);\n        height: calc(#{$unit} + #{$gutter});\n      } @else {\n        $unit: if($nested == true, 100%, 100vw);\n        $gutter: rem-calc($gutter);\n        width: calc(#{$unit} + #{$gutter});\n      }\n    }\n    @else {\n      @if $vertical == true {\n        height: if($nested == true, 100%, 100vh);\n      } @else {\n        width: if($nested == true, 100%, 100vw);\n      }\n    }\n  }\n}\n\n/// Modifies a cell to give it \"block\" behavior (overflow auto, inertial scrolling)\n///\n/// @param {Boolean} $vertical [false] - Is grid vertical or horizontal. Should match grid.\n@mixin exo-cell-block(\n  $vertical: false\n) {\n  $property: if($vertical == true, 'overflow-y', 'overflow-x');\n\n  @if $vertical == true {\n    overflow-y: auto;\n    max-height: 100%;\n    min-height: 100%;\n  } @else {\n    overflow-x: auto;\n    max-width: 100%;\n  }\n\n  -webkit-overflow-scrolling: touch;\n  -ms-overflow-style: -ms-autohiding-scrollbar;\n}\n\n/// Container for inside a grid frame containing multiple blocks. Typically used\n/// as a modifier for a `.cell` to allow the cell to pass along flex sizing\n/// constraints / from parents to children.\n@mixin exo-cell-block-container() {\n  display: flex;\n  flex-direction: column;\n  max-height: 100%;\n\n  > .grid-x {\n    max-height: 100%;\n    flex-wrap: nowrap;\n  }\n}\n\n/////////////////////\n// Exo Grid - Position\n// ---------\n/// Offsets a column to the right/bottom by `$n` columns.\n///\n/// @param {Number|List} $n - Size to offset by. You can pass in any value accepted by the `exo-cell()` mixin, such as `6`, `50%`, or `1 of 2`.\n/// @param {Number|Map} $gutters [$grid-margin-gutters] Map of gutters or single value to use for responsive gutters.\n/// @param {Keyword} $gutter-type [margin] The type of gutter to use. Can be `margin` or `padding`\n/// @param {Number|Array|Keyword} $breakpoint [$-exo-zero-breakpoint] - Single value, breakpoint name, or list of breakpoint names to use for `$gutters`. See `-exo-breakpoint-value()`.\n/// @param {Boolean} $vertical [false] Sets the direction of the offset. If set to true will apply margin-top instead.\n@mixin exo-cell-offset(\n  $n,\n  $gutters: $grid-margin-gutters,\n  $gutter-type: margin,\n  $breakpoint: $-exo-zero-breakpoint,\n  $vertical: false\n) {\n  $direction: if($vertical, 'top', $global-left);\n\n  @include -exo-breakpoint-value($breakpoint, $gutters) {\n    $gutter: rem-calc($-exo-bp-value) * 0.5;\n    $gutter-margin: if($gutter-type == 'margin', $gutter, 0);\n    $size: if($gutter-margin == 0, #{exo-cell-size($n)}, calc(#{exo-cell-size($n)} + #{$gutter-margin}));\n\n    margin-#{$direction}: #{$size};\n  }\n}\n\n/////////////////////\n// Exo Grid - Layout\n// ---------\n/// Sizes child elements so that `$n` number of items appear on each row.\n///\n/// @param {Number} $n - Number of elements to display per row.\n/// @param {String} $selector ['.cell'] - Selector(s) to use for child elements.\n/// @param {Boolean} $gutter-output [true] - Whether or not to output gutters\n/// @param {Number|Map} $gutters [$grid-margin-gutters] - Map or single value for gutters.\n/// @param {Keyword} $gutter-type [margin] - Type of gutter to output. Accepts `margin` or `padding`.\n/// @param {List} $gutter-position [right left] - The position to apply gutters to. Accepts `top`, `bottom`, `left`, `right` in any combination.\n/// @param {String} $breakpoint [null] - The breakpoint to use for the cell generation.\n/// @param {Boolean} $vertical [false] - Set to true to output vertical (height) styles rather than widths.\n@mixin exo-grid-layout(\n  $n,\n  $selector: '.cell',\n  $gutter-output: true,\n  $gutters: $grid-margin-gutters,\n  $gutter-type: margin,\n  $gutter-position: right left,\n  $breakpoint: null,\n  $vertical: false\n) {\n  $size: percentage(math.div(1, $n));\n\n  & > #{$selector} {\n    @include exo-cell($size, $gutter-output, $gutters, $gutter-type, $gutter-position, $breakpoint, $vertical);\n  }\n}\n\n/////////////////////\n// Exo Grid - Collapse\n// ---------\n/// Collapses the grid a cells within it.\n///\n/// @param {String} $selector [.cell] - The child element to remove the gutter from.\n/// @param {Keyword} $gutter-type [margin] - The type of gutter to remove.\n/// @param {List} $gutter-position [right left] - The positions to remove gutters from. Accepts `top`, `bottom`, `left`, `right` in any combination.\n/// @param {Keyword} $min-breakpoint [$-exo-zero-breakpoint] - Minimum breakpoint in `$breakpoint-classes` for which to collapse the gutter.\n@mixin exo-grid-collapse(\n  $selector: '.cell',\n  $gutter-type: margin,\n  $gutter-position: right left,\n  $min-breakpoint: $-exo-zero-breakpoint\n) {\n  // First, lets negate any margins on the top level\n  @if ($gutter-type == 'margin') {\n\n    @include breakpoint($min-breakpoint) {\n      @each $value in $gutter-position {\n        margin-#{$value}: 0;\n      }\n\n      > #{$selector} {\n        @each $value in $gutter-position {\n          margin-#{$value}: 0;\n        }\n      }\n    }\n\n    $excluded-bps: -exo-breakpoints-less-than($min-breakpoint);\n\n    // Output new widths to not include gutters\n    @each $bp in $breakpoint-classes {\n      @if(sl-contain($excluded-bps, $bp)) {\n        @include breakpoint($min-breakpoint) {\n          @for $i from 1 through $grid-columns {\n            // Sizing (percentage)\n            > .#{$bp}-#{$i} {\n              @include exo-cell-static($i, $gutter-output: false, $gutter-type: padding);\n            }\n          }\n        }\n      } @else {\n        @include breakpoint($bp) {\n          @for $i from 1 through $grid-columns {\n            // Sizing (percentage)\n            > .#{$bp}-#{$i} {\n              @include exo-cell-static($i, $gutter-output: false, $gutter-type: padding);\n            }\n          }\n        }\n      }\n    }\n  }\n  @else {\n\n    @include breakpoint($min-breakpoint) {\n      @each $value in $gutter-position {\n        margin-#{$value}: 0;\n      }\n\n      > #{$selector} {\n        @each $value in $gutter-position {\n          padding-#{$value}: 0;\n        }\n      }\n    }\n  }\n}\n\n/////////////////////\n// Exo Grid - Classes\n// ---------\n// Not sure that these are needed or not yet for our use case.\n","@function -exo-flex-justify($text-direction) {\n  $-exo-flex-justify: (\n    'left': if($text-direction == rtl, flex-end, flex-start),\n    'right': if($text-direction == rtl, flex-start, flex-end),\n    'center': center,\n    'justify': space-between,\n    'spaced': space-around,\n  );\n  @return $-exo-flex-justify;\n}\n\n$-exo-flex-align: (\n  'top': flex-start,\n  'bottom': flex-end,\n  'middle': center,\n  'stretch': stretch,\n  'baseline': baseline,\n);\n\n$-exo-flex-direction: (\n  'row': row,\n  'row-reverse': row-reverse,\n  'column': column,\n  'column-reverse': column-reverse,\n);\n\n/// Enables flexbox by adding `display: flex` to the element.\n@mixin flex {\n  display: flex;\n}\n\n/// Horizontally or vertically aligns the items within a flex container.\n///\n/// @param {Keyword} $x [null] - Horizontal alignment to use. Can be `left`, `right`, `center`, `justify`, or `spaced`. Or, set it to `null` (the default) to not set horizontal alignment.\n/// @param {Keyword} $y [null] - Vertical alignment to use. Can be `top`, `bottom`, `middle`, `baseline`, or `stretch`. Or, set it to `null` (the default) to not set vertical alignment.\n@mixin flex-align($x: null, $y: null) {\n  @if $x {\n    @if map-has-key($-exo-flex-justify, $x) {\n      $x: map-get($-exo-flex-justify, $x);\n    }\n    @else {\n      @warn 'flex-grid-row-align(): #{$x} is not a valid value for horizontal alignment. Use left, right, center, justify, or spaced.';\n    }\n  }\n  @if $y {\n    @if map-has-key($-exo-flex-align, $y) {\n      $y: map-get($-exo-flex-align, $y);\n    }\n    @else {\n      @warn 'flex-grid-row-align(): #{$y} is not a valid value for vertical alignment. Use top, bottom, middle, or stretch.';\n    }\n  }\n\n  justify-content: $x;\n  align-items: $y;\n}\n\n/// Vertically align a single column within a flex row. Apply this mixin to a flex column.\n///\n/// @param {Keyword} $y [null] - Vertical alignment to use. Can be `top`, `bottom`, `middle`, or `stretch`. Or, set it to `null` (the default) to not set vertical alignment.\n@mixin flex-align-self($y: null) {\n  @if $y {\n    @if map-has-key($-exo-flex-align, $y) {\n      $y: map-get($-exo-flex-align, $y);\n    }\n    @else {\n      @warn 'flex-grid-column-align(): #{$y} is not a valid value for alignment. Use top, bottom, middle, or stretch.';\n    }\n  }\n\n  align-self: $y;\n}\n\n/// Changes the source order of a flex child. Children with lower numbers appear first in the layout.\n/// @param {Number} $order [0] - Order number to apply.\n@mixin flex-order($order: 0) {\n  order: $order;\n}\n\n/// Change flex-direction\n/// @param {Keyword} $direction [row] - Flex direction to use. Can be\n///   - row (default): same as text direction\n///   - row-reverse: opposite to text direction\n///   - column: same as row but top to bottom\n///   - column-reverse: same as row-reverse top to bottom\n/// @param {Keyword} $medium-direction [$direction] - Flex direction to use for medium. Defaults to $direction but can be `row`, `row-reverse`, `column`, or `column-reverse`.\n/// @param {Keyword} $large-direction [$medium-direction] - Flex direction to use for large. Defaults to $medium-direction but can be `row`, `row-reverse`, `column`, or `column-reverse`.\n@mixin exo-flex-direction($direction: row, $medium-direction: $direction, $large-direction: $medium-direction) {\n  flex-direction: $direction;\n\n  @if ($medium-direction != $direction) {\n\n    @include breakpoint(medium) {\n      flex-direction: $medium-direction;\n    }\n  }\n\n  @if ($large-direction != $medium-direction) {\n\n    @include breakpoint(large) {\n      flex-direction: $large-direction;\n    }\n  }\n}\n\n"]}