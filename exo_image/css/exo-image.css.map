{"version":3,"sources":["exo_image/src/ExoThemeProvider/ExoImage/scss/components/_image.scss","../../Sites/ashenRayne/ikorcc/web/modules/composer/exo/exo/src/scss/util/_breakpoint.scss"],"names":[],"mappings":"AAAA,WACE,YAAA,CACA,iBAAA,CACA,eAAA,CACA,YAAA,CAEA,eACE,aAAA,CACA,UAAA,CACA,WAAA,CAEA,iCACE,iBAAA,CACA,qBAAA,CACA,uBAAA,CAGF,+BACE,iBAAA,CAGF,iCACE,mBAAA,CACA,uCAAA,CACA,uBAAA,CAGF,gCACE,iBAAA,CACA,6BAAA,CACA,sCAAA,CACA,uBAAA,CACA,SAAA,CAIJ,uBACE,4BAAA,CAGF,oBACE,2BAAA,CAGF,mBACE,0BAAA,CAGF,uBACE,4BAAA,CAGF,kBACE,yBAAA,CAGF,qBACE,4BAAA,CC6GE,qCDzGF,kBACE,aAAA,CAAA,CCwGA,+DDnGF,iBACE,aAAA,CAAA,CCkGA,8DD7FF,kBACE,aAAA,CAAA,CC4FA,yCDvFF,iBACE,aAAA,CAAA,CAKN,4BACC,GAAA,qBAAA,CAAA,SAAA,CACA,KAAA,kBAAA,CAAA,SAAA,CAAA,CAGD,6BACC,GAAA,SAAA,CACA,KAAA,SAAA,CAAA","file":"exo-image.css","sourcesContent":[".exo-image {\n  display: none;\n  position: relative;\n  overflow: hidden;\n  outline: none;\n\n  img {\n    display: block;\n    width: 100%;\n    height: auto;\n\n    &.exo-image-preview {\n      filter: blur(20px);\n      transform: scale(1.05);\n      transform-origin: center;\n    }\n\n    &.exo-image-float {\n      position: absolute;\n    }\n\n    &.exo-image-fadeout {\n      will-change: opacity;\n      animation: exo-image-fadeout 1s ease-out;\n      transform-origin: center;\n    }\n\n    &.exo-image-reveal {\n      position: relative;\n      will-change: transform, opacity;\n      animation: exo-image-reveal 1s ease-out;\n      transform-origin: center;\n      z-index: 0;\n    }\n  }\n\n  &.bg-x-center {\n    background-position-x: center;\n  }\n\n  &.bg-right {\n    background-position-x: right;\n  }\n\n  &.bg-left {\n    background-position-x: left;\n  }\n\n  &.bg-y-center {\n    background-position-y: center;\n  }\n\n  &.bg-top {\n    background-position-y: top;\n  }\n\n  &.bg-bottom {\n    background-position-y: bottom;\n  }\n\n  @include breakpoint(xlarge only) {\n    &.xlarge {\n      display: block;\n    }\n  }\n\n  @include breakpoint(large only) {\n    &.large {\n      display: block;\n    }\n  }\n\n  @include breakpoint(medium only) {\n    &.medium {\n      display: block;\n    }\n  }\n\n  @include breakpoint(small only) {\n    &.small {\n      display: block;\n    }\n  }\n}\n\n@keyframes exo-image-reveal {\n\t0% { transform: scale(1.05); opacity: 0; }\n\t100% { transform: scale(1); opacity: 1; }\n}\n\n@keyframes exo-image-fadeout {\n\t0% { opacity: 1; }\n\t100% { opacity: 0; }\n}\n","@use \"sass:math\";\n@import './unit';\n\n////\n/// @group breakpoints\n////\n\n/// A list of named breakpoints. You can use these with the `breakpoint()` mixin to quickly create media queries.\n/// @type Map\n$breakpoints: (\n  small: 0, // converted from \"0\"\n  medium: 40em, // converted from \"all and (min-width: 40em)\"\n  large: 64em, // converted from \"all and (min-width: 64em)\"\n  xlarge: 120em, // converted from \"all and (min-width: 120em)\"\n) !default;\n\n/// The largest named breakpoint in which to include print as a media type\n/// @type Keyword\n$print-breakpoint: large !default;\n\n$-exo-zero-breakpoint: small !default;\n\n$-exo-breakpoints-keys: map-to-list($breakpoints, 'keys');\n\n@if nth(map-values($breakpoints), 1) != 0 {\n  @error 'Your smallest breakpoint (defined in $breakpoints) must be set to \"0\".';\n}\n@else {\n  $-exo-zero-breakpoint: nth(map-keys($breakpoints), 1);\n}\n\n/// All of the names in this list will be output as classes in your CSS, like `.small-12`, `.medium-6`, and so on. Each value in this list must also be in the `$breakpoints` map.\n/// @type List\n$breakpoint-classes: (small medium large) !default;\n\n/// Generates a media query string matching the input value. Refer to the documentation for the `breakpoint()` mixin to see what the possible inputs are.\n///\n/// @param {Keyword|Number} $val [small] - Breakpoint name, or px, rem, or em value to process.\n@function breakpoint($val: $-exo-zero-breakpoint) {\n  // Size or keyword\n  $bp: nth($val, 1);\n  // Value for max-width media queries\n  $bp-max: 0;\n  // Direction of media query (up, down, or only)\n  $dir: if(length($val) > 1, nth($val, 2), up);\n  // Eventual output\n  $str: '';\n  // Is it a named media query?\n  $named: false;\n\n  // Orientation media queries have a unique syntax\n  @if $bp == 'landscape' or $bp == 'portrait' {\n    @return '(orientation: #{$bp})';\n  }\n  @else if $bp == 'retina' {\n    @return '(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi)';\n  }\n\n  // Try to pull a named breakpoint out of the $breakpoints map\n  @if type-of($bp) == 'string' {\n    @if map-has-key($breakpoints, $bp) {\n      @if $dir == 'only' or $dir == 'down' {\n        $bp-max: -exo-map-next($breakpoints, $bp);\n      }\n\n      $bp: map-get($breakpoints, $bp);\n      $named: true;\n    }\n    @else {\n      $bp: 0;\n      @warn 'breakpoint(): \"#{$val}\" is not defined in your $breakpoints setting.';\n    }\n  }\n\n  // Convert any pixel, rem, or unitless value to em\n  $bp: -exo-bp-to-em($bp);\n  @if $bp-max {\n    $bp-max: -exo-bp-to-em($bp-max) - math.div(1, 16);\n  }\n\n  // Conditions to skip media query creation\n  // - It's a named breakpoint that resolved to \"0 down\" or \"0 up\"\n  // - It's a numeric breakpoint that resolved to \"0 \" + anything\n  @if $bp > 0em or $dir == 'only' or $dir == 'down' {\n    // `only` ranges use the format `(min-width: n) and (max-width: n)`\n    @if $dir == 'only' {\n      // Only named media queries can have an \"only\" range\n      @if $named == true {\n        // Only use \"min-width\" if the floor is greater than 0\n        @if $bp > 0em {\n          $str: $str + '(min-width: #{$bp})';\n\n          // Only add \"and\" to the media query if there's a ceiling\n          @if $bp-max != null {\n            $str: $str + ' and ';\n          }\n        }\n\n        // Only use \"max-width\" if there's a ceiling\n        @if $bp-max != null {\n          $str: $str + '(max-width: #{$bp-max})';\n        }\n      }\n      @else {\n        @warn 'breakpoint(): Only named media queries can have an `only` range.';\n      }\n    }\n\n    // `down` ranges use the format `(max-width: n)`\n    @else if $dir == 'down' {\n      $max: if($named, $bp-max, $bp);\n\n      // Skip media query creation if input value is exactly \"0 down\",\n      // unless the function was called as \"small down\", in which case it's just \"small only\"\n      @if $named or $bp > 0em {\n        @if $max != null {\n          $str: $str + '(max-width: #{$max})';\n        }\n      }\n    }\n\n    // `up` ranges use the format `(min-width: n)`\n    @else if $bp > 0em {\n      $str: $str + '(min-width: #{$bp})';\n    }\n  }\n\n  @return $str;\n}\n\n/// Wraps a media query around the content you put inside the mixin. This mixin accepts a number of values:\n///  - If a string is passed, the mixin will look for it in the `$breakpoints` map, and use a media query there.\n///  - If a pixel value is passed, it will be converted to an em value using `$global-font-size` as the base.\n///  - If a rem value is passed, the unit will be changed to em.\n///  - If an em value is passed, the value will be used as-is.\n///\n/// @param {Keyword|Number} $value - Breakpoint name, or px, rem, or em value to process.\n///\n/// @output If the breakpoint is \"0px and larger\", outputs the content as-is. Otherwise, outputs the content wrapped in a media query.\n@mixin breakpoint($value) {\n  $str: breakpoint($value);\n  $bp: index($-exo-breakpoints-keys, $value);\n  $pbp: index($-exo-breakpoints-keys, $print-breakpoint);\n\n  $old-exo-size: null;\n\n  // Make breakpoint size available as a variable\n  @if global-variable-exists(-exo-size) {\n    $old-exo-size: $-exo-size;\n  }\n  $-exo-size: nth($value, 1) !global; // get the first value to account for `only` and `down` keywords\n\n  // If $str is still an empty string, no media query is needed\n  @if $str == '' {\n    @content;\n  }\n\n  // Otherwise, wrap the content in a media query\n  @else {\n    // For named breakpoints less than or equal to $print-breakpoint, add print to the media types\n    @if $bp != null and $bp <= $pbp {\n      @media print, screen and #{$str} {\n        @content;\n       }\n    }\n    @else {\n      @media screen and #{$str} {\n        @content;\n      }\n    }\n  }\n\n  @if $old-exo-size != null {\n    // Restore the old breakpoint size\n    $-exo-size: $old-exo-size !global;\n  }\n  @else {\n    $-exo-size: null !global;\n  }\n}\n\n/// Convers the breakpoints map to a URL-encoded string, like this: `key1=value1&key2=value2`. The value is then dropped into the CSS for a special `<meta>` tag, which is read by the Foundation JavaScript. This is how we transfer values from Sass to JavaScript, so they can be defined in one place.\n/// @access private\n///\n/// @param {Map} $map - Map to convert.\n///\n/// @returns {String} A string containing the map's contents.\n@function -exo-bp-serialize($map) {\n  $str: '';\n  @each $key, $value in $map {\n    $str: $str + $key + '=' + -exo-bp-to-em($value) + '&';\n  }\n  $str: str-slice($str, 1, -2);\n\n  @return $str;\n}\n\n/// Find the next key in a map.\n/// @access private\n///\n/// @param {Map} $map - Map to traverse.\n/// @param {Mixed} $key - Key to use as a starting point.\n///\n/// @returns {Mixed} The value for the key after `$key`, if `$key` was found. If `$key` was not found, or `$key` was the last value in the map, returns `null`.\n@function -exo-map-next($map, $key) {\n\n  // Store the keys of the map as a list\n  $values: map-keys($map);\n\n  $i: 0;\n\n  // If the Key Exists, Get the index of the key within the map and add 1 to it for the next breakpoint in the map\n  @if (map-has-key($map, $key)) {\n    $i: index($values, $key) + 1;\n  }\n\n  // If the key doesn't exist, or it's the last key in the map, return null\n  @if ($i > length($map) or $i == 0) {\n    @return null;\n  }\n  // Otherwise, return the value\n  @else {\n    @return map-get($map, nth($values, $i));\n  }\n\n}\n\n/// Return a list of our named breakpoints less than $key. Useful for dealing with\n/// responsive gutters for the grid.\n/// @access private\n///\n/// @param {String} $key - Key to use as last breakpoint.\n///\n/// @returns {Array} The list of breakpoints up to and. If $key is auto, returns breakpoints above the zero\n@function -exo-breakpoints-less-than($key) {\n  $list: ();\n  $found-key: false;\n\n  @each $name in $-exo-breakpoints-keys {\n    @if ($name == $key) {\n      $found-key: true;\n    }\n    @if not $found-key {\n      $list: append($list, $name);\n    }\n  }\n  @return $list;\n}\n\n/// Return a list of our named breakpoints less than $key. Useful for dealing with\n/// responsive gutters for the grid.\n/// @access private\n///\n/// @param {String} $breakpoing - a named or non-named breakpoing.\n///\n/// @returns {Array} The list of breakpoints up to and. If $key is auto, returns breakpoints above the zero\n@function -exo-closest-named-breakpoint($breakpoint) {\n  $last: $-exo-zero-breakpoint;\n  $found: false;\n\n  $value: unitless-calc($breakpoint, 1px);\n  @each $key, $val in $breakpoints {\n    @if not $found {\n      @if unitless-calc($val) > $value {\n        $found: true;\n      }\n      @else {\n        $last: $key;\n      }\n    }\n  }\n\n  @return $last;\n}\n\n/// Get a value for a breakpoint from a responsive config map or single value.\n/// - If the config is a single value, return it regardless of `$value`.\n/// - If the config is a map and has the key `$value`, the exact breakpoint value is returned.\n/// - If the config is a map and does *not* have the breakpoint, the value matching the next lowest breakpoint in the config map is returned.\n/// @access private\n///\n/// @param {Number|Map} $map - Responsive config map or single value.\n/// @param {Keyword} $value - Breakpoint name to use.\n///\n/// @return {Mixed} The corresponding breakpoint value.\n@function -exo-get-bp-val($map, $value) {\n  // If the given map is a single value, return it\n  @if type-of($map) == 'number' {\n    @return $map;\n  }\n\n  // Check if the breakpoint name exists globally\n  @if not map-has-key($breakpoints, $value) {\n    @if type-of($value) == 'number' {\n      $value: -exo-closest-named-breakpoint($value);\n    }\n    @else {\n      @return null;\n    }\n  }\n  // Check if the breakpoint name exists in the local config map\n  @else if map-has-key($map, $value) {\n    // If it does, just return the value\n    @return map-get($map, $value);\n  }\n  // Otherwise, find the next lowest breakpoint and return that value\n  @else {\n    $anchor: null;\n    $found: false;\n\n    @each $key, $val in $breakpoints {\n      @if not $found {\n        @if map-has-key($map, $key) {\n          $anchor: $key;\n        }\n        @if $key == $value {\n          $found: true;\n        }\n      }\n    }\n\n    @return map-get($map, $anchor);\n  }\n}\n\n/// Return the best breakpoint to use according to the calling context. It returns in order:\n/// 1. the given `$value` argument if it is not null.\n/// 2. the global breakpoint context `$-zf-size` if it is not null (like if called inside then `breakpoint()` mixin)\n/// 3. the given `$default` argument.\n/// @access private\n///\n/// @param {Keyword} $value [null] - Breakpoint to use in priority if non-null.\n/// @param {Keyword} $default [null] - Breakpoint to use by default if no other value can be used.\n///\n/// @return {Keyword} The resolved breakpoint.\n@function -exo-current-breakpoint($value: null, $default: null) {\n  @if ($value != null) {\n    @return $value;\n  }\n  @else if (variable-exists(-exo-size) and type-of($-exo-size) != 'number') and $-exo-size != null {\n    @return $-exo-size;\n  }\n  @else {\n    @return $default;\n  }\n}\n\n@if map-has-key($breakpoints, small) {\n  $small-up: screen;\n  $small-only: unquote('screen and #{breakpoint(small only)}');\n}\n\n@if map-has-key($breakpoints, medium) {\n  $medium-up: unquote('screen and #{breakpoint(medium)}');\n  $medium-only: unquote('screen and #{breakpoint(medium only)}');\n}\n\n@if map-has-key($breakpoints, large) {\n  $large-up: unquote('screen and #{breakpoint(large)}');\n  $large-only: unquote('screen and #{breakpoint(large only)}');\n}\n\n@if map-has-key($breakpoints, xlarge) {\n  $xlarge-up: unquote('screen and #{breakpoint(xlarge)}');\n  $xlarge-only: unquote('screen and #{breakpoint(xlarge only)}');\n}\n\n@if map-has-key($breakpoints, xxlarge) {\n  $xxlarge-up: unquote('screen and #{breakpoint(xxlarge)}');\n}\n"]}