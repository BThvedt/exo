<?php

/**
 * @file
 * Contains exo_modal.module.
 */

use Drupal\exo_modal\Ajax\ExoModalOpenCommand;
use Drupal\Component\Utility\Html;
use Drupal\Component\Utility\NestedArray;
use Drupal\Core\Render\Markup;
use Drupal\exo_modal\Ajax\ExoModalCloseCommand;
use Drupal\Core\Ajax\SettingsCommand;
use Drupal\Core\Form\FormStateInterface;
use Symfony\Component\HttpFoundation\Request;
use Drupal\Core\Url;
use Drupal\Core\Asset\AttachedAssetsInterface;
use Drupal\exo_modal\ExoModalInterface;

/**
 * Implements hook_theme().
 */
function exo_modal_theme($existing, $type, $theme, $path) {
  return [
    'exo_modal_trigger' => [
      'render element' => 'element',
      'file' => 'exo_modal.theme',
    ],
    'exo_modal' => [
      'render element' => 'element',
      'file' => 'exo_modal.theme',
    ],
    'exo_modal_container' => [
      'render element' => 'element',
      'file' => 'exo_modal.theme',
    ],
  ];
}

/**
 * Implements template_preprocess_exo().
 */
function exo_modal_preprocess_exo(&$variables) {
  $variables['canvas_after']['exo_modal'] = [
    '#type' => 'html_tag',
    '#tag' => 'div',
    '#attributes' => [
      'id' => 'exo-modals',
      'class' => [
        'exo-modals',
      ],
      'aria-hidden' => 'true',
    ],
  ];
}

/**
 * Implements hook_exo_modal_setting_presets().
 */
function exo_modal_exo_modal_setting_presets($config_id) {
  $presets = [];
  $presets['aside_top'] = [
    'label' => 'Aside Top',
    'modal' => [
      'top' => 0,
      'width' => '100%',
      'radius' => 0,
      'transitionIn' => 'fadeInDown',
      'transitionOut' => 'fadeOutUp',
    ],
  ];
  $presets['aside_left'] = [
    'label' => 'Aside Left',
    'modal' => [
      'left' => 0,
      'width' => 600,
      'transitionIn' => 'fadeInLeft',
      'transitionOut' => 'fadeOutLeft',
      'navigateArrows' => 'closeScreenEdge',
      'openTall' => TRUE,
    ],
  ];
  $presets['aside_right'] = [
    'label' => 'Aside Right',
    'modal' => [
      'right' => 0,
      'width' => 600,
      'transitionIn' => 'fadeInRight',
      'transitionOut' => 'fadeOutRight',
      'navigateArrows' => 'closeScreenEdge',
      'openTall' => TRUE,
    ],
  ];
  $presets['aside_bottom'] = [
    'label' => 'Aside Bottom',
    'modal' => [
      'bottom' => 0,
      'width' => '100%',
      'radius' => 0,
      'transitionIn' => 'fadeInUp',
      'transitionOut' => 'fadeOutDown',
    ],
  ];
  $presets['alert'] = [
    'label' => 'Alert',
    'modal' => [
      'top' => 0,
      'radius' => 0,
      'transitionIn' => 'fadeInDown',
      'transitionOut' => 'fadeOutUp',
    ],
  ];
  return $presets;
}

/**
 * Implements hook_library_info_alter().
 */
function exo_modal_library_info_alter(&$libraries, $extension) {
  if ($extension == 'core') {
    $path = '/' . \Drupal::service('extension.list.module')->getPath('exo_modal') . '/js';
    // Exo Modal overrides all dialog functionality.
    $libraries['drupal.dialog']['js'] = [];
    $libraries['drupal.dialog']['dependencies'][] = 'exo_modal/theme';
    $libraries['drupal.dialog']['dependencies'][] = 'exo_modal/ajax';

    // Exo Modal overrides all dialog functionality.
    $libraries['drupal.dialog.ajax']['js'] = [];
    $libraries['drupal.dialog.ajax']['js'][$path . '/exo.modal.dialog.ajax.js'] = [
      'minified' => TRUE,
    ];
  }
  if ($extension == 'ckeditor') {
    $path = '/' . \Drupal::service('extension.list.module')->getPath('exo_modal') . '/js';
    $libraries['drupal.ckeditor']['js'][$path . '/exo.modal.ckeditor.js'] = [
      'minified' => TRUE,
    ];
    $libraries['drupal.ckeditor']['dependencies'][] = 'core/drupal.dialog.ajax';
  }
}

/**
 * Implements hook_ajax_render_alter().
 */
function exo_modal_ajax_render_alter(array &$data) {
  $modal_settings_collection = [];
  foreach ($data as $key => $item) {
    if ($item['command'] === 'webformCloseDialog') {
      $command = new ExoModalCloseCommand();
      $data[] = $command->render();
      break;
    }
    if ($item['command'] === 'openDialog') {
      $id = Html::getUniqueId($data[$key]['selector']);
      $dialog_options = $data[$key]['dialogOptions'] ?? [];
      $options = [];
      $command = new ExoModalOpenCommand($id, Markup::create($data[$key]['data']), $options);
      $modal = $command->getModal();
      $modal->setSetting(['modal', 'padding'], '20px');
      $modalOptions = $dialog_options['exoModal'] ?? $dialog_options['exo_modal'] ?? [];
      if ($item['selector'] == '#drupal-off-canvas') {
        $modal->setSetting(['modal', 'width'], 400);
        $modal->setSetting(['modal', 'overlay'], TRUE);
        $modal->setSetting(['modal', 'nest'], FALSE);
      }
      foreach ($dialog_options as $k => $val) {
        switch ($k) {
          case 'modal':
            $modal->setSetting(['modal', 'nest'], $val);
            $modal->setSetting(['modal', 'overlay'], $val);
            $modal->setSetting(['modal', 'bodyOverflow'], $val);
            break;

          case 'title':
            $modal->setSetting(['modal', $k], $val);
            break;

          case 'dialogClass':
            $modal->addModalClass($val);
            if ($val == 'token-tree-dialog') {
              $modal->setSetting(['modal', 'nest'], TRUE);
              $modal->setSetting(['modal', 'overlay'], FALSE);
              $modal->setSetting(['modal', 'bodyOverflow'], FALSE);
            }
            break;

          case 'width':
            if ($val != 'auto') {
              $modal->setSetting(['modal', 'width'], $val);
            }
            break;

          case 'position':
            if (isset($val['at'])) {
              // @see token browser.
              foreach (explode(' ', $val['at']) as $position) {
                $parts = explode('-', $position);
                $modal->setSetting(['modal', $parts[0]], $parts[1]);
              }
              $modal->setSetting(['modal', 'fullscreen'], TRUE);
            }
            break;

          case 'resizable':
            $modal->setSetting(['modal', 'fullscreen'], !empty($value));
            break;

          case 'drupalOffCanvasPosition':
            if ($val == 'side') {
              $modal->setSetting('exo_preset', 'aside_right');
            }
            break;
        }
      }
      if (is_array($modalOptions)) {
        foreach ($modalOptions as $k => $val) {
          if ($k === 'preset' || $k === 'exo_preset') {
            $presets = exo_presets('exo_modal');
            if (isset($presets[$val])) {
              $preset = $presets[$val];
              if (!empty($preset['theme'])) {
                $modal->setSetting('theme', $preset['theme']);
              }
              if (!empty($preset['theme_content'])) {
                $modal->setSetting('theme_content', $preset['theme_content']);
              }
              $modal->setSetting('exo_preset', $val);
            }
          }
          else {
            $modal->setSetting(['modal', $k], $val);
          }
        }
      }
      $data[$key] = $command->render();
      $modal_settings_collection[] = exo_modal_js_settings_append_presets($modal->getDrupalSettings());
    }
  }
  if ($modal_settings_collection) {
    $settingsCommand = NULL;
    foreach ($data as $key => $item) {
      if ($item['command'] === 'settings') {
        $settingsCommand = &$data[$key];
      }
    }
    if (!$settingsCommand) {
      $command = new SettingsCommand([], TRUE);
      array_unshift($data, $command->render());
      $settingsCommand = &$data[0];
    }
    foreach ($modal_settings_collection as $modal_settings) {
      if (isset($settingsCommand['settings']['exoModal']['modals'])) {
        $settingsCommand['settings']['exoModal'] = NestedArray::mergeDeep($settingsCommand['settings']['exoModal'], $modal_settings['exoModal']);
      }
      else {
        $settingsCommand['settings'] += $modal_settings;
      }
    }
  }
}

/**
 * Implements hook_exo_modal_alter().
 */
function exo_modal_exo_modal_alter(ExoModalInterface $modal, array $context) {
  $route_name = $context['route_name'];
  if (\Drupal::service('router.admin_context')->isAdminRoute()) {
    $modal->setSetting('theme', 'primary');
    $modal->setSetting('theme_content', 'white');
  }
  $use_full = FALSE;
  // Block builder.
  if (substr($route_name, 0, 6) == 'block.') {
    $use_full = TRUE;
  }
  // Webform builder.
  if (substr($route_name, 0, 14) == 'entity.webform') {
    $use_full = TRUE;
    $modal->removeModalClass('webform-ui-dialog');
  }
  // Special handling for views modals.
  if (substr($route_name, 0, 9) == 'views_ui.') {
    $use_full = TRUE;
    $view = \Drupal::routeMatch()->getParameter('view');
    if ($view) {
      $modal->setModalSetting('subtitle', t('for %label view', ['%label' => $view->label()]));
    }
    $modal->setModalSetting('padding', '0');
    $modal->setModalSetting('nest', FALSE);
    $icon = \Drupal::service('plugin.manager.exo_icon')->getDefinitionMatch('views', ['local_task', 'admin']);
    if ($icon) {
      $modal->setModalSetting('icon', $icon);
    }
  }
  if ($use_full) {
    $modal->setModalSetting('top', '20px');
    $modal->setModalSetting('bottom', '20px');
    $modal->setModalSetting('right', '20px');
    $modal->setModalSetting('left', '20px');
    $modal->setModalSetting('width', '100%');
    $modal->setModalSetting('transitionIn', 'fadeInDown');
    $modal->setModalSetting('transitionOut', 'fadeOutUp');
    $modal->addModalClass('is-admin');
  }
}

/**
 * Implements hook_module_implements_alter().
 */
function exo_modal_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'exo_modal_alter') {
    $group = $implementations['exo_modal'];
    $implementations = ['exo_modal' => $group] + $implementations;
  }
}

/**
 * Implements hook_views_data_alter().
 */
function exo_modal_views_data_alter(array &$data) {
  $entity_types = \Drupal::entityTypeManager()->getDefinitions();
  foreach ($entity_types as $entity_type) {
    if ($entity_type->hasViewBuilderClass()) {
      $rendered_entity = [
        'field' => [
          'title' => t('Rendered entity in modal'),
          'help' => t('Renders an entity in a view mode modal.'),
          'id' => 'exo_modal_rendered_entity',
        ],
      ];
      $base_table = $entity_type->getBaseTable();
      $data[$base_table]['exo_modal_rendered_entity'] = $rendered_entity;

      if ($entity_type->isRevisionable()) {
        $revision_table = $entity_type->getRevisionTable() ?: $entity_type->id() . '_revision';
        $data[$revision_table]['exo_modal_rendered_entity'] = $rendered_entity;
      }
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function exo_modal_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if (substr($form_id, 0, 6) == 'views_' && \Drupal::routeMatch()->getRouteName() == 'exo_modal.api.views.view') {
    if ($form_id == 'views_exposed_form') {
      $view = $form_state->get('view');
      if (!$view->ajaxEnabled()) {
        $form['#access'] = FALSE;
      }
    }
    else {
      // All other forms are assumed to be views forms. All forms wrapped within
      // a modal will try to post to the actual view URL. We want them to post
      // to the modal URL but redirect to the referrer which is the page the
      // modal was displayed on.
      $referer = \Drupal::request()->server->get('HTTP_REFERER');
      $base_url = Request::createFromGlobals()->getSchemeAndHttpHost();
      $alias = substr($referer, strlen($base_url));
      $url = Url::fromUri("internal:" . $alias);
      $form_state->set('modal_redirect', $url);
      $form['#submit'][] = 'exo_modal_form_redirect_submit';
      $form['#action'] = \Drupal::request()->getRequestUri();
    }
  }

  if ($form_id === 'user_register_form') {
    $resolver = \Drupal::service('class_resolver');
    $controller = $resolver->getInstanceFromDefinition('\Drupal\exo_modal\Controller\ExoModalAccountController');
    $controller->registerFormAlter($form, $form_state);
  }
}

/**
 * A submit handler that will redirect if modal_redirect is sert on form state.
 */
function exo_modal_form_redirect_submit($form, FormStateInterface $form_state) {
  if ($url = $form_state->get('modal_redirect')) {
    $form_state->setRedirectUrl($url);
  }
}

/**
 * Implements hook_js_settings_alter().
 */
function exo_modal_js_settings_alter(array &$settings, AttachedAssetsInterface $assets) {
  $settings = exo_modal_js_settings_append_presets($settings);
}

/**
 * Implements hook_js_settings_alter().
 */
function exo_modal_js_settings_append_presets(array $settings) {
  if (isset($settings['exoModal']['modals'])) {
    foreach ($settings['exoModal']['modals'] as &$modal) {
      if (isset($modal['preset'])) {
        $presets = exo_presets('exo_modal');
        if (isset($presets[$modal['preset']]['modal'])) {
          $settings['exoModal']['presets'][$modal['preset']] = $presets[$modal['preset']]['modal'];
        }
      }
    }
  }
  return $settings;
}
