{"version":3,"sources":["exo_alchemist/src/ExoThemeProvider/ExoAlchemist/scss/exo-alchemist.admin.preview.scss","exo/src/scss/base/_variables.scss","exo/src/scss/util/_flex.scss"],"names":[],"mappings":"AAEA,4BACE,eAAA,CACA,kBAAA,CAEA,yDACE,aAAA,CACA,kBAAA,CACA,UAAA,CACA,YCuBa,CDtBb,iCAAA,CACA,iBAAA,CACA,QAAA,CACA,kCAAA,CAEA,8LAGE,UAAA,CACA,eAAA,CAIJ,gDACE,QAAA,CACA,kBAAA,CACA,wBAAA,CACA,gBAAA,CACA,YCIa,CDFb,yDACE,SAAA,CACA,gBAAA,CAKN,uBEVE,YAAA,CFYA,eAAA,CACA,oCAAA,CACA,kBAAA,CACA,qCAAA,CAEA,+BACE,UAAA","file":"exo-alchemist.admin.preview.css","sourcesContent":["@import 'exo-common';\n\n.exo-component-preview-form {\n  max-width: rem-calc(800);\n  margin: 0 auto $global-margin;\n\n  .exo-component-modify-button {\n    display: block;\n    background: gray(70);\n    color: gray(0);\n    padding: $global-padding;\n    transition: background-color $global-speed;\n    text-align: center;\n    border: 0;\n    box-shadow: 0 0 10px alpha(gray(100), 0.3);\n\n    &:hover,\n    &:active,\n    &:focus {\n      color: gray(0);\n      background: gray(60);\n    }\n  }\n\n  .messages.alchemist {\n    margin: 0;\n    background: gray(90);\n    border: 1px solid gray(70);\n    font-size: rem-calc(12);\n    padding: $global-padding;\n\n    .message {\n      padding: 0;\n      text-shadow: none;\n    }\n  }\n}\n\n.exo-component-preview {\n  @include flex;\n  margin: 0 0 $global-margin;\n  outline: 1px dashed alpha(color(theme-black), 0.3);\n  outline-offset: 4px;\n  box-shadow: 0 0 25px alpha(color(theme-black), 0.2);\n\n  > .layout {\n    width: 100%;\n  }\n}\n","////////////////////////////////////////////////////////////////////////////////\n/// Colors\n////////////////////////////////////////////////////////////////////////////////\n\n$global-colors: (\n  theme-black: #1a1a1a,\n  theme-white: #fff,\n  theme-gray: #777,\n  theme-base: #373a3c,\n  theme-offset: #f1f1f1,\n  theme-primary: #2780e3,\n  theme-secondary: #b6bf3d,\n  theme-success: #86c13d,\n  theme-warning: #f1ba2e,\n  theme-alert: #e54040,\n) !default;\n\n// Themes will add colors to this variable.\n$colors: () !default;\n\n////////////////////////////////////////////////////////////////////////////////\n/// Globals\n////////////////////////////////////////////////////////////////////////////////\n$global-speed: 350ms;\n$global-radius: 3px;\n$global-font-size: 100%;\n$global-lineheight: 1.5;\n$global-speed: 350ms;\n$global-radius: 3px;\n$global-menu-padding: 0.7rem 1rem !default;\n$menu-items-padding: $global-menu-padding !default;\n$body-antialiased: true;\n$global-margin: 1rem;\n$global-padding: 1rem;\n$global-position: 1rem;\n$global-weight-normal: normal;\n$global-weight-bold: bold;\n$global-width: rem-calc(1100);\n$grid-row-width: $global-width;\n$grid-container: $global-width;\n\n/// Sets the text direction of the CSS. Can be either `ltr` or `rtl`.\n/// @type Keyword\n$global-text-direction: ltr !default;\n$global-left: if($global-text-direction == rtl, right, left);\n$global-right: if($global-text-direction == rtl, left, right);\n\n// Internal variable that contains the flex justifying options\n$-exo-flex-justify: -exo-flex-justify($global-text-direction);\n\n$sizes: (\n  margin: rem-calc(30),\n  padding: rem-calc(30),\n  font: rem-calc(16),\n);\n\n/// Global tolerance for color pick contrast.\n/// @type Number\n$global-color-pick-contrast-tolerance: 0 !default;\n$contrast-warnings: true !default;\n","@function -exo-flex-justify($text-direction) {\n  $-exo-flex-justify: (\n    'left': if($text-direction == rtl, flex-end, flex-start),\n    'right': if($text-direction == rtl, flex-start, flex-end),\n    'center': center,\n    'justify': space-between,\n    'spaced': space-around,\n  );\n  @return $-exo-flex-justify;\n}\n\n$-exo-flex-align: (\n  'top': flex-start,\n  'bottom': flex-end,\n  'middle': center,\n  'stretch': stretch,\n  'baseline': baseline,\n);\n\n$-exo-flex-direction: (\n  'row': row,\n  'row-reverse': row-reverse,\n  'column': column,\n  'column-reverse': column-reverse,\n);\n\n/// Enables flexbox by adding `display: flex` to the element.\n@mixin flex {\n  display: flex;\n}\n\n/// Horizontally or vertically aligns the items within a flex container.\n///\n/// @param {Keyword} $x [null] - Horizontal alignment to use. Can be `left`, `right`, `center`, `justify`, or `spaced`. Or, set it to `null` (the default) to not set horizontal alignment.\n/// @param {Keyword} $y [null] - Vertical alignment to use. Can be `top`, `bottom`, `middle`, `baseline`, or `stretch`. Or, set it to `null` (the default) to not set vertical alignment.\n@mixin flex-align($x: null, $y: null) {\n  @if $x {\n    @if map-has-key($-exo-flex-justify, $x) {\n      $x: map-get($-exo-flex-justify, $x);\n    }\n    @else {\n      @warn 'flex-grid-row-align(): #{$x} is not a valid value for horizontal alignment. Use left, right, center, justify, or spaced.';\n    }\n  }\n  @if $y {\n    @if map-has-key($-exo-flex-align, $y) {\n      $y: map-get($-exo-flex-align, $y);\n    }\n    @else {\n      @warn 'flex-grid-row-align(): #{$y} is not a valid value for vertical alignment. Use top, bottom, middle, or stretch.';\n    }\n  }\n\n  justify-content: $x;\n  align-items: $y;\n}\n\n/// Vertically align a single column within a flex row. Apply this mixin to a flex column.\n///\n/// @param {Keyword} $y [null] - Vertical alignment to use. Can be `top`, `bottom`, `middle`, or `stretch`. Or, set it to `null` (the default) to not set vertical alignment.\n@mixin flex-align-self($y: null) {\n  @if $y {\n    @if map-has-key($-exo-flex-align, $y) {\n      $y: map-get($-exo-flex-align, $y);\n    }\n    @else {\n      @warn 'flex-grid-column-align(): #{$y} is not a valid value for alignment. Use top, bottom, middle, or stretch.';\n    }\n  }\n\n  align-self: $y;\n}\n\n/// Changes the source order of a flex child. Children with lower numbers appear first in the layout.\n/// @param {Number} $order [0] - Order number to apply.\n@mixin flex-order($order: 0) {\n  order: $order;\n}\n\n/// Change flex-direction\n/// @param {Keyword} $direction [row] - Flex direction to use. Can be\n///   - row (default): same as text direction\n///   - row-reverse: opposite to text direction\n///   - column: same as row but top to bottom\n///   - column-reverse: same as row-reverse top to bottom\n/// @param {Keyword} $medium-direction [$direction] - Flex direction to use for medium. Defaults to $direction but can be `row`, `row-reverse`, `column`, or `column-reverse`.\n/// @param {Keyword} $large-direction [$medium-direction] - Flex direction to use for large. Defaults to $medium-direction but can be `row`, `row-reverse`, `column`, or `column-reverse`.\n@mixin exo-flex-direction($direction: row, $medium-direction: $direction, $large-direction: $medium-direction) {\n  flex-direction: $direction;\n\n  @if ($medium-direction != $direction) {\n\n    @include breakpoint(medium) {\n      flex-direction: $medium-direction;\n    }\n  }\n\n  @if ($large-direction != $medium-direction) {\n\n    @include breakpoint(large) {\n      flex-direction: $large-direction;\n    }\n  }\n}\n\n"]}