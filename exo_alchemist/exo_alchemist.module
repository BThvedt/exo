<?php

/**
 * @file
 * Contains exo_alchemist.module.
 */

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Config\Entity\ThirdPartySettingsInterface;
use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityFormInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Entity\FieldableEntityInterface;
use Drupal\Core\EventSubscriber\MainContentViewSubscriber;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Plugin\Context\Context;
use Drupal\Core\Plugin\Context\ContextDefinition;
use Drupal\Core\Plugin\Context\EntityContext;
use Drupal\Core\Render\Element;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Url;
use Drupal\exo_alchemist\Cache\ExoCacheableContext;
use Drupal\exo_alchemist\Element\ExoLayoutBuilder;
use Drupal\exo_alchemist\Entity\ExoLayoutBuilderEntityViewDisplay;
use Drupal\exo_alchemist\EntityTypeInfo;
use Drupal\exo_alchemist\ExoComponentAnimationManager;
use Drupal\exo_alchemist\ExoComponentManager;
use Drupal\exo_alchemist\ExoComponentPropertyManager;
use Drupal\exo_alchemist\Form\ExoOverridesEntityForm;
use Drupal\exo_alchemist\Plugin\ExoComponentField\View;
use Drupal\exo_modal\ExoModalInterface;
use Drupal\layout_builder\Entity\LayoutBuilderEntityViewDisplay;
use Drupal\layout_builder\Entity\LayoutEntityDisplayInterface;
use Drupal\layout_builder\Form\OverridesEntityForm;
use Drupal\layout_builder\Plugin\SectionStorage\DefaultsSectionStorage;
use Drupal\views\Plugin\views\query\QueryPluginBase;
use Drupal\views\ViewExecutable;

/**
 * Implements hook_help().
 */
function exo_alchemist_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the exo_alchemist module.
    case 'help.page.exo_alchemist':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Provides layout builder enhancements.') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_theme().
 */
function exo_alchemist_theme($existing, $type, $theme, $path) {
  $themes = [];
  $themes['exo_component_wrapper'] = [
    'render element' => 'element',
  ];
  /** @var \Drupal\exo_alchemist\ExoComponentManager $exo_component_manager */
  $exo_component_manager = \Drupal::service('plugin.manager.exo_component');
  $definitions = $exo_component_manager->getInstalledDefinitions();
  foreach ($definitions as $key => $definition) {
    /** @var \Drupal\exo_alchemist\Definition\ExoComponentDefinition $definition */
    $theme = [
      'template' => $definition->getTemplate(),
      'path' => $definition->getPath(),
      'variables' => [
        'entity' => NULL,
        'instance_id' => NULL,
        'component_path' => NULL,
        'attributes' => [],
        'content_attributes' => [],
        'preview' => NULL,
        'preview_field_attributes' => [],
      ],
    ];
    if ($definition->isExtended() && isset($definitions[$definition->extendId()])) {
      $theme['path'] = $definitions[$definition->extendId()]->getPath();
    }
    // Drupal crawls the entire active theme for tpl files. We need to protect
    // against it picking up our components and overriding module tpls.
    // @see exo_alchemist_theme_registry_alter(). This may result in actual
    // overrides not working as they should.
    if (isset($existing[$definition->getName()])) {
      $theme['revert_core'] = $existing[$definition->getName()];
    }
    foreach ($definition->getFields() as $field) {
      $theme['variables'][$field->getName()] = NULL;
    }
    foreach ($definition->getModifiers() as $modifier) {
      $name = ExoComponentPropertyManager::modifierNameToKey($modifier->getName());
      $theme['variables'][str_replace('__global', '_global', $name) . '_value'] = NULL;
      if ($modifier->getName() !== '_global') {
        $theme['variables'][$name] = NULL;
      }
    }
    if (!empty($definition->getEnhancements())) {
      $theme['variables']['enhancement'] = NULL;
    }
    foreach ($definition->getAnimations() as $animation) {
      if ($animation->getName() !== '_global') {
        $theme['variables'][ExoComponentAnimationManager::animationNameToKey($animation->getName())] = NULL;
      }
    }
    if ($properties = $exo_component_manager->getPropertyInfo($definition)) {
      foreach ($properties as $key => $value) {
        $id = str_replace('#', '', $key);
        if ($id == '_global') {
          // Add anything contained in global.
          foreach ($value['properties'] as $property_id => $property_label) {
            if (array_key_exists($property_id, $theme['variables'])) {
              continue;
            }
            $theme['variables'][$property_id] = NULL;
          }
          continue;
        }
        if (array_key_exists($id, $theme['variables'])) {
          continue;
        }
        $theme['variables'][$id] = NULL;
      }
    }
    $themes[$definition->getThemeHook()] = $theme;
  }
  return $themes;
}

/**
 * Implements hook_theme().
 */
function exo_alchemist_theme_registry_alter(&$theme_registry) {
  $exo_component_manager = \Drupal::service('plugin.manager.exo_component');
  foreach ($exo_component_manager->getInstalledDefinitions() as $definition) {
    $component_definition = $theme_registry[$definition->getThemeHook()];
    if (isset($component_definition['revert_core'])) {
      $current_definition = &$theme_registry[$definition->getName()];
      if ($component_definition['path'] === $current_definition['path']) {
        $current_definition['path'] = $component_definition['revert_core']['path'];
      }
    }
  }
}

/**
 * Prepares variables for exo_component_wrapper templates.
 *
 * Default template: exo-component-wrapper.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - element: An associative array containing the properties of the element.
 *     Properties used: #id, #attributes, #children.
 */
function template_preprocess_exo_component_wrapper(array &$variables) {
  $element = $variables['element'];
  // Ensure #attributes is set.
  $element += ['#wrapper_attributes' => []];
  $variables['prefix'] = [];
  $variables['suffix'] = [];
  $variables['children'] = $element['#children'];
  $variables['attributes'] = $element['#wrapper_attributes'];

  if (isset($element) && is_array($element) && !empty($element['#contextual_links'])) {
    // Mark this element as potentially having contextual links attached to it.
    $variables['attributes']['class'][] = 'contextual-region';

    // Renders a contextual links placeholder unconditionally, thus not breaking
    // the render cache. Although the empty placeholder is rendered for all
    // users, contextual_page_attachments() only adds the asset library for
    // users with the 'access contextual links' permission, thus preventing
    // unnecessary HTTP requests for users without that permission.
    $variables['prefix']['contextual_links'] = [
      '#type' => 'contextual_links_placeholder',
      '#id' => _contextual_links_to_id($element['#contextual_links']),
    ];
  }
}

/**
 * Implements hook_form_alter().
 */
function exo_alchemist_form_alter(&$form, FormStateInterface $form_state, $form_id) {// We use form id instead of route as we don't want this impacting component
  // forms inserted into content.
  if (substr($form['#form_id'], 0, 15) == 'layout_builder_') {
    foreach (['drupal_ajax', 'drupal_modal', 'drupal_dialog'] as $wrapper) {
      if (strpos(\Drupal::request()->get(MainContentViewSubscriber::WRAPPER_FORMAT) ?? '', $wrapper) !== FALSE) {
        $form['#exo_theme'] = 'black';
      }
    }
  }
  if (substr($form_id, -20) === '_layout_builder_form') {
    $form_object = $form_state->getFormObject();
    if ($form_object instanceof EntityFormInterface) {
      $entity = $form_object->getEntity();
      $entity->layoutBuilderEnabled = TRUE;
      if ($form_object instanceof OverridesEntityForm) {
        ExoLayoutBuilder::alterCompleteForm($form, $form_state);
      }
    }
  }
  if ($form_id === 'entity_view_display_edit_form') {
    $form_object = $form_state->getFormObject();
    if ($form_object instanceof EntityFormInterface) {
      /** @var \Drupal\Core\Entity\Display\EntityViewDisplayInterface $entity */
      $entity = $form_object->getEntity();
      if (substr($entity->getMode(), 0, 10) === 'exo_field_') {
        $form['layout']['#access'] = FALSE;
      }
      if (!empty($form['modes']['display_modes_custom'])) {
        $exo_enabled = [];
        $has_display = FALSE;
        foreach ($form['modes']['display_modes_custom']['#options'] as $key => $label) {
          if (substr($key, 0, 10) === 'exo_field_') {
            $has_display = TRUE;
            $exo_enabled[$key] = '';
            if (in_array($key, $form['modes']['display_modes_custom']['#default_value'])) {
              $exo_enabled[$key] = $key;
            }
            unset($form['modes']['display_modes_custom']['#options'][$key]);
          }
        }
        if ($has_display) {
          $form_state->set('exo_field_modes', $exo_enabled);
          $form['modes']['display_modes_custom']['#element_validate'][] = 'exo_alchemist_entity_view_display_edit_form_validate';
        }
      }
    }
  }
  if ($form_id === 'layout_builder_configure_section') {
    $current_user = \Drupal::currentUser();
    $route_match = \Drupal::routeMatch();
    /** @var \Drupal\layout_builder\Form\ConfigureSectionForm $form_object */
    $form_object = $form_state->getFormObject();
    $section_storage = $form_object->getSectionStorage();
    $delta = $route_match->getParameter('delta');
    $form_state->set('section_delta', $delta);
    $is_update = is_null($route_match->getParameter('plugin_id'));
    $lock_default = FALSE;
    $permission_default = '';
    if ($is_update) {
      $section = $section_storage->getSection($delta);
      $settings = $section->getLayoutSettings();
      // Dynamic column widths cannot be changed.
      if (isset($settings['column_widths']) && $settings['column_widths'] == 'dynamic') {
        $form['layout_settings']['column_widths']['#type'] = 'hidden';
      }
      $lock_default = !empty($settings['exo_section_lock']);
      $permission_default = isset($settings['exo_section_permission']) ? $settings['exo_section_permission'] : '';
    }
    if ($current_user->hasPermission('administer exo alchemist')) {
      if ($section_storage instanceof DefaultsSectionStorage) {
        $form['layout_settings']['exo_section_lock'] = [
          '#type' => 'checkbox',
          '#title' => t('Lock section'),
          '#description' => t('Prevent components within this section from being added/edited/removed when overriding.'),
          '#default_value' => $lock_default,
        ];
      }
      $permission_options = ['' => t('- Allow all users with layout access -')];
      $permissions = \Drupal::service('user.permissions')->getPermissions();
      $module_handler = \Drupal::service('module_handler');
      foreach ($permissions as $perm => $perm_item) {
        $provider = $perm_item['provider'];
        $display_name = $module_handler->getName($provider);
        $permission_options[$display_name][$perm] = strip_tags($perm_item['title']);
      }
      $form['layout_settings']['exo_section_permission'] = [
        '#type' => 'select',
        '#title' => t('Permission'),
        '#description' => t('Only users with the listed permission will be able to add/edit/remove components from this section.'),
        '#options' => $permission_options,
        '#default_value' => $permission_default,
      ];
      $exo_component_manager = \Drupal::service('plugin.manager.exo_component');
      $options = [];
      foreach ($exo_component_manager->getInstalledDefinitions() as $definition) {
        $options[$definition['id']] = $definition['label'];
      }
      asort($options);
      $form['layout_settings']['exo_component_include'] = [
        '#type' => 'select',
        '#title' => t('Include components'),
        '#multiple' => TRUE,
        '#options' => $options,
        '#default_value' => !empty($settings['exo_component_include']) ? $settings['exo_component_include'] : [],
      ];
      $form['layout_settings']['exo_component_exclude'] = [
        '#type' => 'select',
        '#title' => t('Exclude components'),
        '#multiple' => TRUE,
        '#options' => $options,
        '#default_value' => !empty($settings['exo_component_exclude']) ? $settings['exo_component_exclude'] : [],
      ];
    }
    $form['#submit'][] = 'exo_alchemist_layout_builder_configure_section_submit';
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter() for node_form.
 */
function exo_alchemist_form_node_form_alter(&$form, FormStateInterface $form_state) {
  /** @var \Drupal\Core\Entity\EntityFormInterface $form_object */
  $form_object = $form_state->getFormObject();
  $entity = $form_object->getEntity();
  if ($entity->isNew()) {
    foreach (array_keys($form['actions']) as $action) {
      if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
        $form['actions'][$action]['#submit'][] = 'exo_alchemist_node_form_submit';
      }
    }
  }
}

/**
 * Handle redirect to layout.
 */
function exo_alchemist_node_form_submit($form, FormStateInterface $form_state) {
  /** @var \Drupal\Core\Entity\EntityFormInterface $form_object */
  $form_object = $form_state->getFormObject();
  $entity = $form_object->getEntity();
  /** @var \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display */
  $display = \Drupal::entityTypeManager()->getStorage('entity_view_display')->load('node.' . $entity->bundle() . '.default');
  if ($display->getThirdPartySetting('layout_builder', 'allow_custom', FALSE)) {
    $generator = \Drupal::service('exo_alchemist.generator');
    $generator->nodeFormSubmit($form, $form_state);
  }
}

/**
 * Remove dynamically generated displays.
 */
function exo_alchemist_entity_view_display_edit_form_validate($element, FormStateInterface $form_state) {
  $values = $form_state->getValue($element['#parents']);
  $values += $form_state->get('exo_field_modes');
  $form_state->setValueForElement($element, $values);
}

/**
 * Handle saving additional settings for a section.
 */
function exo_alchemist_layout_builder_configure_section_submit($form, FormStateInterface $form_state) {
  /** @var \Drupal\layout_builder\Form\ConfigureSectionForm $form_object */
  $form_object = $form_state->getFormObject();
  $section_storage = $form_object->getSectionStorage();
  $section = $section_storage->getSection($form_state->get('section_delta'));
  $configuration = $section->getLayoutSettings();
  $configuration['exo_section_lock'] = $form_state->getValue(['layout_settings', 'exo_section_lock']);
  $configuration['exo_section_permission'] = $form_state->getValue(['layout_settings', 'exo_section_permission']);
  $configuration['exo_component_include'] = $form_state->getValue(['layout_settings', 'exo_component_include']);
  $configuration['exo_component_exclude'] = $form_state->getValue(['layout_settings', 'exo_component_exclude']);
  if (empty($configuration['exo_section_uuid'])) {
    $configuration['exo_section_uuid'] = \Drupal::service('uuid')->generate();
  }
  $section->setLayoutSettings($configuration);
  \Drupal::service('layout_builder.tempstore_repository')->set($section_storage);
}

/**
 * Implements hook_library_info_build().
 */
function exo_alchemist_library_info_build() {
  $libraries = [];
  $exo_component_manager = \Drupal::service('plugin.manager.exo_component');
  foreach ($exo_component_manager->getInstalledDefinitions() as $definition) {
    /** @var \Drupal\exo_alchemist\Definition\ExoComponentDefinition $definition */
    if ($definition->hasLibrary()) {
      if ($js = $definition->getJs()) {
        $libraries[$definition->getLibraryId()]['js'] = array_map(function ($item) {
          return [];
        }, array_flip($js));
      }
      if ($css = $definition->getCss()) {
        $libraries[$definition->getLibraryId()]['css']['base'] = array_map(function ($item) {
          return [];
        }, array_flip($css));
      }
    }
  }
  return $libraries;
}

/**
 * Implements hook_entity_operation().
 */
function exo_alchemist_entity_operation(EntityInterface $entity) {
  $account = \Drupal::currentUser();
  $entity_type_id = $entity->getEntityTypeId();

  $route_name = "layout_builder.overrides.$entity_type_id.view";
  $route_parameters = [
    $entity_type_id => $entity->id(),
  ];

  // If current user has access to route, then add the operation link. The
  // access check will only return TRUE if the bundle is Layout Builder-
  // enabled, overrides are allowed, and user has necessary permissions.
  $access_manager = \Drupal::service('access_manager');
  if (!$access_manager->checkNamedRoute($route_name, $route_parameters, $account)) {
    return;
  }

  return [
    'Layout' => [
      'title' => t('Layout'),
      'weight' => 50,
      'url' => Url::fromRoute($route_name, $route_parameters),
    ],
  ];
}

/**
 * Implements hook_element_plugin_alter().
 */
function exo_alchemist_element_plugin_alter(&$definitions) {
  $definitions['layout_builder']['class'] = 'Drupal\exo_alchemist\Element\ExoLayoutBuilder';
}

/**
 * Implements hook_entity_type_alter().
 */
function exo_alchemist_entity_type_alter(array &$entity_types) {
  /** @var \Drupal\Core\Entity\EntityTypeInterface[] $entity_types */
  $entity_types['entity_view_display']->setClass(ExoLayoutBuilderEntityViewDisplay::class);

  // Ensure every fieldable entity type has a layout form.
  foreach ($entity_types as $entity_type) {
    if ($entity_type->entityClassImplements(FieldableEntityInterface::class)) {
      $entity_type->setFormClass('layout_builder', ExoOverridesEntityForm::class);
    }
  }
}

/**
 * Implements hook_entity_access().
 */
function exo_alchemist_entity_access(EntityInterface $entity, $operation, AccountInterface $account) {
  if ($entity instanceof ThirdPartySettingsInterface && $entity instanceof ContentEntityInterface && $entity->getEntityTypeId() == ExoComponentManager::ENTITY_BUNDLE_TYPE) {
    if (in_array($operation, ['update', 'delete']) && !empty($entity->getThirdPartySetting('exo_alchemist', 'exo_component_definition'))) {
      return AccessResult::forbidden();
    }
  }
  if ($entity->getEntityTypeId() == 'media' && $operation != 'view') {
    /** @var \Drupal\media\MediaInterface $entity */
    if (!$entity->get('alchemist_key')->isEmpty()) {
      return AccessResult::forbidden();
    }
  }
  if ($entity->getEntityTypeId() == 'entity_view_mode' && $operation != 'view') {
    /** @var \Drupal\Core\Entity\EntityViewModeInterface $entity */
    list(, $bundle) = explode('.', $entity->id());
    if (substr($bundle, 0, 10) === 'exo_field_') {
      return AccessResult::forbidden();
    }
  }
  return AccessResult::neutral();
}

/**
 * Implements hook_views_query_alter().
 */
function exo_alchemist_views_query_alter(ViewExecutable $view, QueryPluginBase $query) {
  if ($view->id() == 'media') {
    /** @var \Drupal\views\Plugin\views\query\Sql $query */
    // Do not show media items used by default exo components.
    $query->addWhere(1, 'media_field_data.alchemist_key', NULL, 'IS NULL');
  }
}

/**
 * Implements hook_entity_operations_alter().
 */
function exo_alchemist_entity_operation_alter(array &$operations, EntityInterface $entity) {
  if ($entity->getEntityTypeId() == ExoComponentManager::ENTITY_BUNDLE_TYPE) {
    $exo_component_manager = \Drupal::service('plugin.manager.exo_component');
    if ($definition = $exo_component_manager->getEntityBundleComponentDefinition($entity)) {
      $operations['preview'] = [
        'title' => t('Preview'),
        'url' => Url::fromRoute('exo_alchemist.component.preview', [
          'definition' => $definition->id(),
        ]),
        'weight' => -10,
      ];
      unset($operations['manage-form-display'], $operations['manage-display']);
    }
  }
}

/**
 * Implements hook_entity_base_field_info().
 */
function exo_alchemist_entity_base_field_info(EntityTypeInterface $entity_type) {
  return \Drupal::service('class_resolver')
    ->getInstanceFromDefinition(EntityTypeInfo::class)
    ->entityBaseFieldInfo($entity_type);
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function exo_alchemist_entity_presave(EntityInterface $entity) {
  // Managed generated components.
  \Drupal::service('exo_alchemist.generator')->handlePreSave($entity);
}

/**
 * Implements hook_entity_insert().
 */
function exo_alchemist_entity_insert(EntityInterface $entity) {
  exo_alchemist_entity_update($entity);
}

/**
 * Implements hook_entity_update().
 */
function exo_alchemist_entity_update(EntityInterface $entity) {
  // Managed generated components.
  // @see \Drupal\exo_alchemist\ExoComponentGenerator
  \Drupal::service('exo_alchemist.generator')->handlePostSave($entity);
}

/**
 * Implements hook_entity_predelete().
 */
function exo_alchemist_entity_predelete(EntityInterface $entity) {
  // Managed generated components.
  // @see \Drupal\exo_alchemist\ExoComponentGenerator
  \Drupal::service('exo_alchemist.generator')->handlePreDelete($entity);
}

/**
 * Implements hook_entity_delete().
 */
function exo_alchemist_entity_delete(EntityInterface $entity) {
  // Managed generated components.
  // @see \Drupal\exo_alchemist\ExoComponentGenerator
  \Drupal::service('exo_alchemist.generator')->handlePostDelete($entity);
}

/**
 * Implements hook_entity_view() for node entities.
 */
function exo_alchemist_entity_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  if (isset($build['_layout_builder']) && $display instanceof LayoutEntityDisplayInterface && $display->isLayoutBuilderEnabled()) {
    $keys = [];
    foreach (Element::children($build['_layout_builder']) as $region_id) {
      if (!empty($build['_layout_builder'][$region_id]['content'])) {
        $keys[] = $region_id;
      }
    }
    if (empty($keys)) {
      return;
    }
    $build['#attributes']['class'][] = 'alchemist';
    $build['#attached']['library'][] = 'exo_alchemist/front';
    $first_key = key($keys);
    $last_key = end($keys);
    foreach (['first' => $first_key, 'last' => $last_key] as $position => $key) {
      foreach (Element::children($build['_layout_builder'][$key]) as $region_id) {
        $region = &$build['_layout_builder'][$key][$region_id];
        uasort($region, 'Drupal\Component\Utility\SortArray::sortByWeightProperty');
        $component_ids = array_filter(Element::children($region), function ($element_id) use ($region) {
          return !empty($region[$element_id]['#exo_component']);
        });
        if (empty($component_ids)) {
          continue;
        }
        if ($position === 'first') {
          $component_id = reset($component_ids);
        }
        else {
          $component_id = end($component_ids);
        }
        $component = $region[$component_id];
        /** @var \Drupal\exo_alchemist\Definition\ExoComponentDefinition $definition */
        $definition = $component['#exo_component'];
        if ($definition && ($handler = $definition->getHandler())) {
          $method = 'view' . ucfirst($position) . 'PreRender';
          $handler->{$method}($build['_layout_builder'][$key][$region_id][$component_id], $definition, $component['#block_content']);
        }
        $id = $definition->isExtended() ? $definition->extendId() : $definition->id();
        $build['_layout_builder'][$key][$region_id][$component_id]['#wrapper_attributes']['data-component-' . $position] = $id;
        $build['_layout_builder'][$key][$region_id][$component_id]['#wrapper_attributes']['class'][] = 'exo-component-' . $position;
      }

    }
    $build['#page'] = TRUE;
    $entity->layoutBuilderEnabled = TRUE;
  }
}

/**
 * Implements tempalte_preprocess_node().
 */
function exo_alchemist_preprocess_node(&$variables) {
  if (isset($variables['content']['_layout_builder'])) {
    $variables['page'] = TRUE;
  }
}

/**
 * Implements hook_entity_view_alter().
 *
 * ExtraFieldBlock block plugins add placeholders for each extra field which is
 * configured to be displayed. Those placeholders are replaced by this hook.
 * Modules that implement hook_entity_extra_field_info() use their
 * implementations of hook_entity_view_alter() to add the rendered output of
 * the extra fields they provide, so we cannot get the rendered output of extra
 * fields before this point in the view process.
 * exo_alchemist_module_implements_alter() moves this implementation of
 * hook_entity_view_alter() to the end of the list.
 *
 * @see \Drupal\exo_alchemist\Plugin\ExoComponentField\EntityExtraField::build()
 * @see exo_alchemist_module_implements_alter()
 */
function exo_alchemist_entity_view_alter(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display) {
  // Only replace extra fields when Layout Builder has been used to alter the
  // build. See \Drupal\layout_builder\Entity\LayoutBuilderEntityViewDisplay::buildMultiple().
  if (isset($build['_layout_builder']) && !Element::isEmpty($build['_layout_builder'])) {
    /** @var \Drupal\Core\Entity\EntityFieldManagerInterface $field_manager */
    $field_manager = \Drupal::service('entity_field.manager');
    $extra_fields = $field_manager->getExtraFields($entity->getEntityTypeId(), $entity->bundle());
    if (!empty($extra_fields['display'])) {
      foreach ($extra_fields['display'] as $field_name => $extra_field) {
        // Remove all extra fields from output.
        unset($build[$field_name]);
      }
    }
    if (!empty($build['_layout_builder'][0]['content'])) {
      // There are times when an extra field block sneaks its way into this
      // area. When this happens, we remove it.
      foreach ($build['_layout_builder'][0]['content'] as &$content) {
        if (isset($content['#base_plugin_id']) && $content['#base_plugin_id'] === 'extra_field_block') {
          $content['#access'] = FALSE;
        }
      }
    }
  }

  $route_name = \Drupal::routeMatch()->getRouteName();
  // If the entity is displayed within a Layout Builder block and the current
  // route is in the Layout Builder UI, then remove all contextual link
  // placeholders.
  if ($display instanceof LayoutBuilderEntityViewDisplay && strpos($route_name, 'layout_builder.') === 0) {
    unset($build['#contextual_links']);
  }
}

/**
 * Implements hook_preprocess_page().
 */
function exo_alchemist_preprocess_page(&$variables) {
  $route_name = \Drupal::routeMatch()->getRouteName();
  switch (TRUE) {
    case $route_name == 'exo_alchemist.component.preview':
    case substr($route_name, 0, 24) === 'layout_builder.defaults.';
      // $variables['#cache']['contexts'][] = 'url.path';
      $variables['attributes']['class'][] = 'component-enabled';
      $variables['attributes']['class'][] = 'component-builder';
      if ($route_name == 'exo_alchemist.component.preview') {
        $variables['attributes']['class'][] = 'component-preview';
      }
      else {
        $variables['attributes']['class'][] = 'component-default';
      }
      break;
  }
}

/**
 * Implements hook_preprocess_block().
 */
function exo_alchemist_preprocess_block__page_title_block(&$variables) {
  $route_name = \Drupal::routeMatch()->getRouteName();
  switch ($route_name) {
    case 'entity.node.canonical':
    case 'entity.node.latest_version':
      $node = \Drupal::routeMatch()->getParameter('node');
      // If field exists we can assume this is handled by layout builder.
      if ($node && \Drupal::service('exo_alchemist.generator')->isLayoutCompatibleEntity($node)) {
        if ($route_name == 'entity.node.latest_version') {
          \Drupal::messenger()->addWarning(t('Content State: <strong>@state</strong>', [
            '@state' => $node->get('moderation_state')->view(['type' => 'content_moderation_state'])[0]['#markup'],
          ]));
        }
        $variables['attributes']['class'][] = 'visually-hidden';
      }
      break;
    case 'entity.taxonomy_term.canonical':
      $term = \Drupal::routeMatch()->getParameter('taxonomy_term');
      // If field exists we can assume this is handled by layout builder.
      if ($term && \Drupal::service('exo_alchemist.generator')->isLayoutCompatibleEntity($term)) {
        $variables['attributes']['class'][] = 'visually-hidden';
      }
      break;
    case 'exo_alchemist.component.preview':
    case substr($route_name, 0, 24) === 'layout_builder.defaults.';
    case substr($route_name, 0, 25) === 'layout_builder.overrides.';
      $variables['attributes']['class'][] = 'visually-hidden';
      break;
  }
}

/**
 * Implements hook_contextual_links_alter().
 */
function exo_alchemist_contextual_links_alter(array &$links, $group, array $route_parameters) {
  // Disable ALL contextual links.
  $links = [];
}

/**
 * Implements hook_ENTITY_TYPE_access().
 */
function exo_alchemist_block_content_access(EntityInterface $entity, $operation, $account) {
  // We need to allow all operations of alchemist types.
  // Without this, media library returns on 403 when adding media.
  if ($operation !== 'view' && substr($entity->bundle(), 0, 4) == 'exo_') {
    return AccessResult::allowedIfHasPermission($account, 'edit exo components');
  }
  // Defer to layout builder content access if we are not acting on an exo
  // component.
  return layout_builder_block_content_access($entity, $operation, $account);
}

/**
 * Implements hook_ENTITY_TYPE_create_access().
 */
function exo_alchemist_block_content_create_access(AccountInterface $account, array $context, $entity_bundle) {
  // Because new block_content within layout builder do not have IDs, the create
  // access check is called. We need to allow creation of alchemist types.
  // Without this, media library returns on 403 when adding media.
  if (substr($entity_bundle, 0, 4) == 'exo_') {
    return AccessResult::allowedIfHasPermission($account, 'add exo components');
  }
  return AccessResult::neutral();
}

/**
 * Implements hook_ENTITY_TYPE_load().
 */
function exo_alchemist_entity_view_display_load(array $entities) {
  foreach ($entities as $entity) {
    if ($entity instanceof LayoutEntityDisplayInterface && $entity->isLayoutBuilderEnabled()) {
      $sections = $entity->getSections();
      foreach ($sections as $section) {
        foreach ($section->getComponents() as $component) {
          $configuration = $component->get('configuration');
          if (!empty($configuration['block_uuid'])) {
            $block = \Drupal::service('entity.repository')->loadEntityByUuid('block_content', $configuration['block_uuid']);
            if ($block) {
              $configuration['block_revision_id'] = $block->getRevisionId();
              $component->setConfiguration($configuration);
            }
          }
        }
      }
    }
  }
}

/**
 * Implements hook_exo_modal_alter().
 */
function exo_alchemist_exo_modal_alter(ExoModalInterface $modal, array $context) {
  // Link dialog must be nested.
  if (substr($context['route_name'], 0, 15) == 'layout_builder.') {
    $trigger_name = \Drupal::request()->request->get('_triggering_element_name');
    $modal->setSetting('theme', 'black');
    $modal->setSetting('theme_content', 'black');
    $modal->setModalSetting('overlay', TRUE);
    if ($context['route_name'] === 'layout_builder.component.appearance') {
      $modal->setModalSetting('overlayColor', 'transparent');
    }
    $modal->setModalSetting('width', 500);
    $modal->setModalSetting('padding', 20);
    $modal->setModalSetting('bodyOverflow', TRUE);
    $modal->addModalClass('is-admin');
    if ($trigger_name && strpos($trigger_name, 'media-library-open-button') !== FALSE) {
      // $modal->setModalSetting('width', '80%');
      $modal->setModalSetting('top', '20px');
      $modal->setModalSetting('bottom', '20px');
      $modal->setModalSetting('right', '20px');
      $modal->setModalSetting('left', '20px');
      $modal->setModalSetting('width', '100%');
    }
  }
  if (in_array($context['route_name'], ['editor.link_dialog', 'linkit.linkit_dialog'])) {
    $modal->setSetting('theme', 'black');
    $modal->setSetting('theme_content', 'black');
    $modal->setModalSetting('nest', TRUE);
  }
}

/**
 * Implements hook_exo_form_settings_alter().
 */
function exo_alchemist_exo_form_settings_alter(array &$settings, array $context) {
  // Act on layout builder routes except for the overrides page.
  switch ($context['route_name']) {
    case 'layout_builder.field.update':
      $trigger_name = \Drupal::request()->request->get('_triggering_element_name');
      // Ignore if trigger name is 'op' as that means we are rebuilding the
      // layout.
      if (!$trigger_name || ($trigger_name && $trigger_name !== 'op')) {
        $settings['theme'] = 'black';
        $settings['style'] = 'intersect';
      }
      break;
  }
}

/**
 * Implements hook_module_implements_alter().
 */
function exo_alchemist_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'entity_presave') {
    // $group = $implementations['exo_alchemist'];
    // $implementations = ['exo_alchemist' => $group] + $implementations;
    // We need deeper control over when layout builder entity_presave is called.
    unset($implementations['layout_builder']);
  }
  if ($hook == 'block_content_access') {
    // We replace layout builder's block content access check with our own.
    unset($implementations['layout_builder']);
  }
  if ($hook == 'entity_type_alter') {
    $group = $implementations['exo_alchemist'];
    unset($implementations['exo_alchemist']);
    $implementations['exo_alchemist'] = $group;
  }
  if ($hook === 'entity_view_alter') {
    // Ensure that this module's implementation of hook_entity_view_alter() runs
    // last so that other modules that use this hook to render extra fields will
    // run before it.
    $group = $implementations['exo_alchemist'];
    unset($implementations['exo_alchemist']);
    $implementations['exo_alchemist'] = $group;
    // Remove regular layout builder alter as we replace it.
    unset($implementations['layout_builder']);
  }
}

/**
 * Implements hook_layout_builder_section_storage_alter().
 */
function exo_alchemist_layout_builder_section_storage_alter(array &$definitions) {
  $definitions['defaults']->setClass('Drupal\exo_alchemist\Plugin\SectionStorage\ExoDefaultsSectionStorage');
  $definitions['overrides']->setClass('Drupal\exo_alchemist\Plugin\SectionStorage\ExoOverridesSectionStorage');
}

/**
 * Implements hook_views_pre_view().
 */
function exo_alchemist_views_pre_view(ViewExecutable $view, $display_id, array &$args) {
  if (!empty($view->exoAlchemist)) {
    \Drupal::request()->query->set($view->exoAlchemist['key'], $view->exoAlchemist['entity_id']);
    return;
  }
  $all = \Drupal::request()->query->all();
  foreach ($all as $key => $value) {
    if (substr($key, 0, 6) == 'exo-c-') {
      $tokens = explode(',', base64_decode(str_replace(['-', '_'], ['+', '/'], substr($key, 6))));
      $id = $tokens[0];
      $field_name = $tokens[1];
      $is_default_storage = $tokens[2];
      $is_preview = $tokens[3];
      $view_id = $tokens[4];
      $view_display = $tokens[5];
      if ($view->id() !== $view_id || $view->current_display !== $view_display) {
        continue;
      }
      /** @var \Drupal\exo_alchemist\ExoComponentManager $exo_component_manager */
      $exo_component_manager = \Drupal::service('plugin.manager.exo_component');
      $entity_type = ExoComponentManager::ENTITY_TYPE;
      $entity = \Drupal::entityTypeManager()->getStorage($entity_type)->load($id);
      if (!$entity) {
        continue;
      }
      $definition = $exo_component_manager->getEntityComponentDefinition($entity);
      $field = $definition->getField($field_name);
      if ($field) {
        $component_field = $exo_component_manager->getExoComponentFieldManager()->createFieldInstance($field);
        if ($component_field instanceof View) {
          $contexts = [
            'entity' => EntityContext::fromEntity($entity),
            'default_storage' => new Context(new ContextDefinition('boolean'), $is_default_storage),
            'preview' => new Context(new ContextDefinition('boolean'), $is_preview),
            'cacheable_metadata' => new Context(new ContextDefinition('any'), new ExoCacheableContext()),
          ];
          // Reduce to a single views field.
          $fields = $definition->getFields();
          $fields = [
            $field->getName() => $fields[$field->getName()],
          ];
          $definition->setFields($fields);

          // Rebuild entity to make sure values are placed properly.
          $values = $exo_component_manager->viewEntityValues($definition, $entity, $contexts);
          if (!isset($values[$field->getName()]['view'])) {
            continue;
          }
          $altered_view = $values[$field->getName()]['view'];
          if ($altered_view) {
            $view->getDisplay()->options = $altered_view->getDisplay()->options;
          }
        }
      }
    }
  }
}

/**
 * Implements template_preprocess_taxonomy_term().
 */
function exo_alchemist_preprocess_taxonomy_term(&$variables) {
  if (!empty($variables['elements']['#exo_hide_title'])) {
    unset($variables['name']);
  }
}
