{"version":3,"sources":["exo/src/scss/exo.theme.option.scss","../../Sites/augustAsh/glad-v2/web/modules/contrib/exo/exo/src/scss/util/_flex.scss"],"names":[],"mappings":"AAEA,kBACE,aAAA,CACA,iBAAA,CACA,aAAA,CACA,wBAAA,CACA,iBAAA,CACA,eAAA,CACA,iBAAA,CAEA,0CACE,eAAA,CACA,iBAAA,CACA,eAAA,CACA,+BAAA,CACA,gBAAA,CACA,cAAA,CAGF,2CCQA,YAAA,CAyBA,4BAfQ,CDbR,0CACE,eAAA,CACA,UAAA","file":"exo.theme.option.css","sourcesContent":["@import 'exo-common';\n\n.exo-theme-option {\n  display: block;\n  min-width: rem-calc(200);\n  color: color(theme-black);\n  border: 1px solid grey(15);\n  border-radius: 5px;\n  overflow: hidden;\n  margin: rem-calc(5) 0;\n\n  .exo-theme-option-label {\n    font-weight: 700;\n    text-align: center;\n    background: color(theme-white);\n    border-bottom: 1px solid grey(15);\n    text-shadow: none;\n    padding: rem-calc(4);\n  }\n\n  .exo-theme-option-colors {\n    @include flex;\n    @include flex-align(spaced);\n  }\n\n  .exo-theme-option-color {\n    height: rem-calc(30);\n    width: 100%;\n  }\n}\n","@function -exo-flex-justify($text-direction) {\n  $-exo-flex-justify: (\n    'left': if($text-direction == rtl, flex-end, flex-start),\n    'right': if($text-direction == rtl, flex-start, flex-end),\n    'center': center,\n    'justify': space-between,\n    'spaced': space-around,\n  );\n  @return $-exo-flex-justify;\n}\n\n$-exo-flex-align: (\n  'top': flex-start,\n  'bottom': flex-end,\n  'middle': center,\n  'stretch': stretch,\n  'baseline': baseline,\n);\n\n$-exo-flex-direction: (\n  'row': row,\n  'row-reverse': row-reverse,\n  'column': column,\n  'column-reverse': column-reverse,\n);\n\n/// Enables flexbox by adding `display: flex` to the element.\n@mixin flex {\n  display: flex;\n}\n\n/// Horizontally or vertically aligns the items within a flex container.\n///\n/// @param {Keyword} $x [null] - Horizontal alignment to use. Can be `left`, `right`, `center`, `justify`, or `spaced`. Or, set it to `null` (the default) to not set horizontal alignment.\n/// @param {Keyword} $y [null] - Vertical alignment to use. Can be `top`, `bottom`, `middle`, `baseline`, or `stretch`. Or, set it to `null` (the default) to not set vertical alignment.\n@mixin flex-align($x: null, $y: null) {\n  @if $x {\n    @if map-has-key($-exo-flex-justify, $x) {\n      $x: map-get($-exo-flex-justify, $x);\n    }\n    @else {\n      @warn 'flex-grid-row-align(): #{$x} is not a valid value for horizontal alignment. Use left, right, center, justify, or spaced.';\n    }\n  }\n  @if $y {\n    @if map-has-key($-exo-flex-align, $y) {\n      $y: map-get($-exo-flex-align, $y);\n    }\n    @else {\n      @warn 'flex-grid-row-align(): #{$y} is not a valid value for vertical alignment. Use top, bottom, middle, or stretch.';\n    }\n  }\n\n  justify-content: $x;\n  align-items: $y;\n}\n\n/// Vertically align a single column within a flex row. Apply this mixin to a flex column.\n///\n/// @param {Keyword} $y [null] - Vertical alignment to use. Can be `top`, `bottom`, `middle`, or `stretch`. Or, set it to `null` (the default) to not set vertical alignment.\n@mixin flex-align-self($y: null) {\n  @if $y {\n    @if map-has-key($-exo-flex-align, $y) {\n      $y: map-get($-exo-flex-align, $y);\n    }\n    @else {\n      @warn 'flex-grid-column-align(): #{$y} is not a valid value for alignment. Use top, bottom, middle, or stretch.';\n    }\n  }\n\n  align-self: $y;\n}\n\n/// Changes the source order of a flex child. Children with lower numbers appear first in the layout.\n/// @param {Number} $order [0] - Order number to apply.\n@mixin flex-order($order: 0) {\n  order: $order;\n}\n\n/// Change flex-direction\n/// @param {Keyword} $direction [row] - Flex direction to use. Can be\n///   - row (default): same as text direction\n///   - row-reverse: opposite to text direction\n///   - column: same as row but top to bottom\n///   - column-reverse: same as row-reverse top to bottom\n/// @param {Keyword} $medium-direction [$direction] - Flex direction to use for medium. Defaults to $direction but can be `row`, `row-reverse`, `column`, or `column-reverse`.\n/// @param {Keyword} $large-direction [$medium-direction] - Flex direction to use for large. Defaults to $medium-direction but can be `row`, `row-reverse`, `column`, or `column-reverse`.\n@mixin exo-flex-direction($direction: row, $medium-direction: $direction, $large-direction: $medium-direction) {\n  flex-direction: $direction;\n\n  @if ($medium-direction != $direction) {\n\n    @include breakpoint(medium) {\n      flex-direction: $medium-direction;\n    }\n  }\n\n  @if ($large-direction != $medium-direction) {\n\n    @include breakpoint(large) {\n      flex-direction: $large-direction;\n    }\n  }\n}\n\n"]}