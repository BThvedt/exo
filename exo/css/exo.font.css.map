{"version":3,"sources":["../../Sites/augustAsh/msep/web/modules/contrib/exo/exo/src/scss/base/_mixins.scss","exo/src/scss/exo.font.scss"],"names":[],"mappings":"AAyBE,WACE,oBAAA,CACA,iBCrB2D,CDsB3D,eCtBsD,CDuBtD,uDAPM,CAQN,iBAAA,CALF,WACE,oBAAA,CACA,iBCpBiE,CDqBjE,eCrB4D,CDsB5D,6DAPM,CAQN,iBAAA,CALF,WACE,oBAAA,CACA,iBCnB6D,CDoB7D,eCpBwD,CDqBxD,yDAPM,CAQN,iBAAA,CALF,WACE,oBAAA,CACA,iBClB4D,CDmB5D,eCnBuD,CDoBvD,wDAPM,CAQN,iBAAA,CALF,WACE,oBAAA,CACA,iBCjB0D,CDkB1D,eClBqD,CDmBrD,sDAPM,CAQN,iBAAA,CALF,WACE,oBAAA,CACA,iBChBgE,CDiBhE,eCjB2D,CDkB3D,4DAPM,CAQN,iBAAA,CCjBJ,UACE,sCAAA,CACA,gCAAA,CACA,mCAAA,CACA,iCAAA","file":"exo.font.css","sourcesContent":["/////////////////////\n// Font Face\n// Generates the proper font styles from a linked font file(s)\n// ---------\n@use \"sass:math\";\n\n@mixin font-face($name, $path, $weight: null, $style: null, $exts: eot woff2 woff ttf svg) {\n  $src: null;\n\n  $extmods: (\n    eot: '?',\n    svg: '#' + str-replace($name, ' ', '_')\n  );\n\n  $formats: (\n    otf: 'opentype',\n    ttf: 'truetype'\n  );\n\n  @each $ext in $exts {\n    $extmod: if(map-has-key($extmods, $ext), $ext + map-get($extmods, $ext), $ext);\n    $format: if(map-has-key($formats, $ext), map-get($formats, $ext), $ext);\n    $src: append($src, url(quote($path + '.' + $extmod)) format(quote($format)), comma);\n  }\n\n  @font-face {\n    font-family: quote($name);\n    font-style: $style;\n    font-weight: $weight;\n    src: $src;\n    font-display: swap;\n  }\n}\n\n/////////////////////\n// Use icon\n\n@function add-backslash($character) {\n  @return unquote('\"') + unquote(str-insert($character, '\\\\', 1)) + unquote('\"');\n}\n\n@mixin exo-icon($package, $hex, $position: before) {\n  &:#{$position} {\n    -webkit-font-smoothing: antialiased; // sass-lint:disable-line no-vendor-prefixes\n    -moz-osx-font-smoothing: grayscale; // sass-lint:disable-line no-vendor-prefixes\n    font-family: 'icon-#{$package}' !important; // stylelint-disable-line declaration-no-important\n    display: inline-block;\n    font-style: normal;\n    font-variant: normal;\n    font-weight: normal;\n    line-height: 1;\n    content: add-backslash($hex);\n    @content;\n  }\n}\n\n/////////////////////\n// Sass CSS triangle mixin, create any kind of triangles with ease\n//\n// Use:\n// @include triangle(direction,width,height,color);\n//\n// Example:\n// $square: 50px;\n// $color: red;\n// selector {\n// *\t @include triangle(bottomright,$square,$square,$color);\n// }\n//\n// Forked from https://github.com/juanbrujo/triangle-mixin.less\n@mixin exo-triangle($direction, $size-h, $size-v, $color) {\n  content: '';\n  display: inline-block;\n  width: 0;\n  height: 0;\n  border-style: solid;\n  transform: scale(0.9999);\n  vertical-align: middle;\n\n  @if $direction == top {\n    border-width: 0 $size-v $size-h;\n    border-color: transparent transparent $color;\n  }\n  @if $direction == bottom {\n    border-width: $size-v $size-h 0 $size-v;\n    border-color: $color transparent transparent;\n  }\n  @if $direction == left {\n    border-width: $size-v $size-h $size-v 0;\n    border-color: transparent $color transparent transparent;\n  }\n  @if $direction == right {\n    border-width: $size-v 0 $size-v $size-h;\n    border-color: transparent transparent transparent $color;\n  }\n  @if $direction == topright {\n    border-width: 0 $size-h $size-v 0;\n    border-color: transparent $color transparent transparent;\n  }\n  @if $direction == bottomright {\n    border-width: 0 0 $size-h $size-v;\n    border-color: transparent transparent $color;\n  }\n  @if $direction == bottomleft {\n    border-width: $size-h 0 0 $size-v;\n    border-color: transparent transparent transparent $color;\n  }\n  @if $direction == topleft {\n    border-width: $size-h $size-v 0 0;\n    border-color: $color transparent transparent;\n  }\n  @content;\n}\n\n/////////////////////\n// Breakpoints\n// --------\n/// Iterates through breakpoints defined in `$breakpoint-classes` and prints the CSS inside the mixin at each breakpoint's media query. Use this with the grid, or any other component that has responsive classes.\n///\n/// @param {Boolean} $small [true] - If `false`, the mixin will skip the `small` breakpoint. Use this with components that don't prefix classes with `small-`, only `medium-` and up.\n/// @param {Boolean} $auto-insert-breakpoints [true] - If `false`, the mixin will iterate over breakpoints without doing the media query itself. Useful for more complex media query generation as in the margin grid.\n@mixin exo-each-breakpoint($small: true, $auto-insert-breakpoints: true) {\n  $list: $breakpoint-classes;\n\n  @if not $small {\n    $list: sl-remove($list, $-zf-zero-breakpoint);\n  }\n\n  @each $name in $list {\n    $old-exo-size: null;\n    @if global-variable-exists(exo-size) {\n      $old-exo-size: $exo-size;\n    }\n    $exo-size: $name !global;\n\n    @if $auto-insert-breakpoints {\n      @include breakpoint($name) {\n        @content;\n      }\n    }\n    @else {\n      @content;\n    }\n\n    $exo-size: $old-exo-size !global;\n  }\n}\n\n@mixin exo-progress-throbber() {\n  .ajax-progress-throbber {\n    position: fixed !important;\n    top: 0 !important;\n    left: 0 !important;\n    right: 0 !important;\n    bottom: 0 !important;\n    background: alpha(theme-black, 0.2) !important;\n    z-index: 1000 !important;\n\n    .throbber {\n      position: fixed !important;\n      top: 50% !important;\n      right: 50% !important;\n      bottom: 50% !important;\n      left: 50% !important;\n      width: 16px !important;\n      height: 16px !important;\n      margin-top: -8px !important;\n      margin-left: -8px !important;\n      text-align: center !important;\n      background-color: color(theme-white) !important;\n      background-position: center center !important;\n      border-radius: 50% !important;\n      padding: $global-padding !important;\n    }\n\n    .message {\n      display: none;\n    }\n  }\n}\n\n/////////////////////\n// Exo Breakpoint Mixin\n// ---------\n/// Generate the `@content` passed to the mixin with a value `$-zf-bp-value` related to a breakpoint, depending on the `$name` parameter:\n/// - For a single value, `$-zf-bp-value` is this value.\n/// - For a breakpoint name, `$-zf-bp-value` is the corresponding breakpoint value in `$map`.\n/// - For \"auto\", `$-zf-bp-value` is the corresponding breakpoint value in `$map` and is passed to `@content`, which is made responsive for each breakpoint of `$map`.\n/// @param {Number|Array|Keyword} $name [auto] - Single value, breakpoint name, or list of breakpoint names to use. \"auto\" by default.\n/// @param {Number|Map} $map - Map of breakpoints and values or single value to use.\n@mixin -exo-breakpoint-value(\n  $name: auto,\n  $map: null\n) {\n  @if $name == auto and type-of($map) == 'map' {\n    // \"auto\"\n    @each $k, $v in $map {\n      @include breakpoint($k) {\n        @include -exo-breakpoint-value($v, $map) {\n          @content;\n        }\n      }\n    }\n  }\n  @else {\n    // breakpoint name\n    @if type-of($name) == 'string' {\n      $name: -exo-get-bp-val($map, $name);\n    }\n\n    // breakpoint value\n    $-exo-bp-value: $name !global;\n    @content;\n  }\n}\n\n/// Removes the focus ring around an element when a mouse input is detected.\n@mixin disable-mouse-outline {\n  [data-whatinput='mouse'] & {\n    outline: 0;\n  }\n}\n\n/// Applies the micro clearfix hack popularized by Nicolas Gallagher. Include this mixin on a container if its children are all floated, to give the container a proper height.\n/// The clearfix is augmented with specific styles to prevent borders in flexbox environments\n/// @link http://nicolasgallagher.com/micro-clearfix-hack/ Micro Clearfix Hack\n/// @link http://danisadesigner.com/blog/flexbox-clear-fix-pseudo-elements/ Flexbox fix\n@mixin clearfix {\n  &::before,\n  &::after {\n    display: table;\n    content: ' ';\n  }\n\n  &::after {\n    clear: both;\n  }\n}\n\n/////////////////////\n// Menu Base Mixin\n// --------\n/// Creates the base styles for a Menu.\n@mixin menu-base {\n  padding: 0;\n  margin: 0;\n  list-style: none;\n  position: relative;\n\n  li {\n    @include disable-mouse-outline;\n  }\n\n  a,\n  .button {\n    line-height: 1;\n    text-decoration: none;\n    display: block;\n    padding: $menu-items-padding;\n  }\n\n  // Reset styles of inner elements\n  input,\n  select,\n  a,\n  button {\n    margin-bottom: 0;\n  }\n\n  input {\n    display: inline-block;\n  }\n}\n\n/////////////////////\n// Touchscreen Mixin\n// --------\n/// Apply specific styles based on hover events detected for touchscreen\n/// where primary input is not a mouse.\n@mixin touchscreen() {\n  @media (hover: none) and (pointer: coarse) {\n    @content;\n  }\n}\n\n/////////////////////\n// IE Support Mixin\n// --------\n/// IE can be super fun and doesn't support some of the stuff we are trying to do.\n/// Use this mixin to pass IE specific styles.\n@mixin iesupport() {\n  @media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n    @content;\n  }\n}\n\n/*\n* Dotted Border - A SASS mixin to help you increase spacing between the dots of border-style:dotted.\n* By @florbraz\n* Documentation and examples - github.com/florbraz/Dotted-Border-w-custom-spacing-SCSS-Mixin\n* V1.0\n*/\n@mixin dottedBorder($color: #8f8f8f, $orientation: horizontal, $position: top, $spacing: 5px, $size: 1px) {\n  background-position: $position;\n  @if $orientation == horizontal {\n    background-image: linear-gradient(to right, $color math.div($size, $spacing) * 100%, rgba(255,255,255,0) 0%);\n    background-size: $spacing $size;\n    background-repeat: repeat-x;\n  }\n  @else {\n    background-image: linear-gradient($color math.div($size, $spacing) * 100%, rgba(255,255,255,0) 0%);\n    background-size: $size $spacing;\n    background-repeat: repeat-y;\n  }\n  .ie9 & {\n    border-#{$position}:1px dotted $color;\n  }\n}\n\n/**\n * Hide elements visually, but keep them available for screen readers.\n *\n * Used for information required for screen reader users to understand and use\n * the site where visual display is undesirable. Information provided in this\n * manner should be kept concise, to avoid unnecessary burden on the user.\n * \"!important\" is used to prevent unintentional overrides.\n */\n @mixin visually-hidden($focusable: false) {\n  position: absolute !important;\n  clip: rect(1px, 1px, 1px, 1px);\n  overflow: hidden;\n  height: 1px;\n  width: 1px;\n  word-wrap: normal;\n\n  /**\n   * The .focusable class extends the .visually-hidden class to allow\n   * the element to be focusable when navigated to via the keyboard.\n   */\n  @if $focusable {\n    &:active,\n    &:focus {\n      position: static !important;\n      clip: auto;\n      overflow: visible;\n      height: auto;\n      width: auto;\n    }\n  }\n}\n","@import 'exo-common';\n\n$font-family: Ubuntu;\n$font-type: sans-serif;\n$font: $font-family, $font-type;\n\n@include font-face($font-family, '../fonts/Ubuntu-Light', 300, normal, 'ttf');\n@include font-face($font-family, '../fonts/Ubuntu-LightItalic', 300, italic, 'ttf');\n@include font-face($font-family, '../fonts/Ubuntu-Regular', 400, normal, 'ttf');\n@include font-face($font-family, '../fonts/Ubuntu-Italic', 400, italic, 'ttf');\n@include font-face($font-family, '../fonts/Ubuntu-Bold', 700, normal, 'ttf');\n@include font-face($font-family, '../fonts/Ubuntu-BoldItalic', 700, italic, 'ttf');\n\n.exo-font {\n  font: normal 13px/1em $font;\n  font-smooth: subpixel-antialiased; // sass-lint:disable-line no-misspelled-properties\n  font-smoothing: subpixel-antialiased; // sass-lint:disable-line no-misspelled-properties\n  -moz-osx-font-smoothing: grayscale; // sass-lint:disable-line no-misspelled-properties no-vendor-prefixes\n}\n"]}