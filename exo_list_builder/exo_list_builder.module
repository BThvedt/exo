<?php

/**
 * @file
 * Contains exo_list_builder.module.
 */

use Drupal\Core\Config\Entity\ConfigEntityTypeInterface;
use Drupal\Core\Database\Query\AlterableInterface;
use Drupal\Core\Database\Query\SelectInterface;
use Drupal\Core\Entity\ContentEntityTypeInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Url;

/**
 * Implements hook_help().
 */
function exo_list_builder_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the exo_list_builder module.
    case 'help.page.exo_list_builder':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Provides an enhanced entity list builder.') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_theme().
 */
function exo_list_builder_theme() {
  $theme = [];
  $theme['exo_list_builder_notify'] = [
    'variables' => [
      'message' => NULL,
      'link_text' => NULL,
      'link_url' => NULL,
    ],
  ];
  return $theme;
}

/**
 * Implements hook_mail().
 *
 * @param string $key
 * @param array $message
 * @param array $params
 * @return void
 */
function exo_list_builder_mail($key, &$message, $params) {
  $message['subject'] = $params['subject'];

  /** @var \Drupal\Core\Render\RendererInterface $renderer */
  $renderer = \Drupal::service('renderer');
  $message['body'][] = [
    '#type' => 'markup',
    '#markup' => (string) $renderer->renderPlain($params['message']),
  ];

  /**
   * PDF attachments.
   */
  if (isset($params['attachments'])) {
    $message['params']['attachments'] = $params['attachments'];
  }
}

/**
 * Implements hook_entity_type_alter().
 */
function exo_list_builder_entity_type_alter(array &$entity_types) {
  foreach ($entity_types as $entity_type_id => $entity_type) {
    $handler = $entity_type->getHandlerClass('exo_list_builder');
    if (!$handler) {
      if ($entity_type instanceof ConfigEntityTypeInterface) {
        $handler = 'Drupal\exo_list_builder\ExoListBuilderConfig';
      }
      elseif ($entity_type instanceof ContentEntityTypeInterface) {
        $handler = 'Drupal\exo_list_builder\ExoListBuilderContent';
      }
    }
    if (empty($handler)) {
      continue;
    }
    $entity_type->setHandlerClass('exo_list_builder', $handler);
  }
}

/**
 * Implements hook_query_TAG_alter().
 */
function exo_list_builder_query_entity_list_sort_by_random_alter(AlterableInterface $query) {
  if ($query instanceof SelectInterface) {
    $query->orderRandom();
  }
}

/**
 * Implements hook_query_TAG_alter().
 */
function exo_list_builder_query_entity_list_natsort_alter(AlterableInterface $query) {
  if ($query instanceof SelectInterface) {
    // Must be greater than 8.2.
    if (version_compare(\Drupal::database()->version(), '8.2') < 0) {
      return;
    }
    $order =& $query->getOrderBy();
    if (!empty($order)) {
      $query->addTag('debug');
      foreach ($order as $field => $direction) {
        $number_args = [
          ':natsort_number_regex' => '[a-z ]+',
          ':natsort_replace' => '',
        ];
        $letter_args = [
          ':natsort_letter_regex' => '[0-9 ]+',
          ':natsort_replace' => '',
        ];
        $query->addExpression('LENGTH(CAST(REGEXP_REPLACE(' . $field . ', :natsort_number_regex, :natsort_replace) as NCHAR))', 'number_length', $number_args);
        $query->addExpression('CAST(REGEXP_REPLACE(' . $field . ', :natsort_number_regex, :natsort_replace) as UNSIGNED)', 'number', $number_args);
        $query->addExpression('REGEXP_REPLACE(' . $field . ', :natsort_letter_regex, :natsort_replace)', 'letter', $letter_args);
      }
      $order = ['number_length' => $direction, 'number' => $direction, 'letter' => $direction];
    }
  }
}

/**
 * Implements hook_query_TAG_alter().
 */
function exo_list_builder_query_exo_list_query_alter(AlterableInterface $query) {
  if ($query instanceof SelectInterface) {
    /** @var \Drupal\exo_list_builder\ExoListBuilderInterface $exo_list_builder */
    $exo_list_builder = $query->getMetaData('exo_list_builder');
    $filter_values = $query->getMetaData('exo_list_filter_values');
    foreach ($exo_list_builder->getFilters() as $field_id => $field) {
      if (!empty($field['filter']['instance']) && isset($filter_values[$field_id])) {
        /** @var \Drupal\exo_list_builder\Plugin\ExoListFilterInterface $instance */
        $instance = $field['filter']['instance'];
        $instance->queryRawAlter($query, $filter_values[$field_id], $exo_list_builder->getEntityList(), $field);
      }
    }
  }
}

/**
 * Implements hook_query_TAG_alter().
 */
function exo_list_builder_query_exo_entity_list_moderation_state_alter(AlterableInterface $query) {
  if ($query instanceof SelectInterface) {
    // @see https://www.drupal.org/project/drupal/issues/3025164
    $original_entity_type_id = $query->getMetaData('entity_type');
    if (!$original_entity_type_id) {
      return;
    }
    $all_revisions = $query->getMetaData('all_revisions');
    $original_entity_type = \Drupal::entityTypeManager()->getDefinition($original_entity_type_id);
    $entity_type = \Drupal::entityTypeManager()->getDefinition('content_moderation_state');
    $join_conditions = [];
    $join_arguments = [];

    $join_conditions[] = '%alias.content_entity_type_id = :content_moderation_state_entity_type';
    $join_arguments[':content_moderation_state_entity_type'] = $original_entity_type->id();

    // Determine the best table to JOIN to. If it's a simple query, then
    // we do not have much to choose from. But if it is the contrary case,
    // we could have a revision data table which is a more desired table to
    // JOIN to since same revision might be available in multiple languages.
    $base_table_alias = 'base_table';
    if (!$query->getMetaData('simple_query')) {
      if (isset($query->getTables()[$original_entity_type->getRevisionDataTable()])) {
        $base_table_alias = $original_entity_type->getRevisionDataTable();
      }
    }

    $id_key = $original_entity_type->getKey('id');
    $join_conditions[] = '%alias.content_entity_id = ' . $base_table_alias . '.' . $id_key;

    if ($entity_type->hasKey('langcode') && $original_entity_type->hasKey('langcode')) {
      $join_conditions[] = "%alias." . $entity_type->getKey('langcode') . " = $base_table_alias." . $original_entity_type->getKey('langcode');
    }

    if ($entity_type->hasKey('revision') && $original_entity_type->hasKey('revision')) {
      $join_conditions[] = '%alias.content_entity_revision_id = base_table.' . $original_entity_type->getKey('revision');
    }

    if ($all_revisions) {
      $table = $entity_type->getRevisionDataTable();
    }
    else {
      $table = $entity_type->getDataTable();
    }
    $query->addJoin('LEFT', $table, NULL, implode(' AND ', $join_conditions), $join_arguments);

    // Sort support.
    $sort_field = $query->getMetaData('exo_entity_list_moderation_state_sort_field');
    if ($sort_field) {
      $sort_direction = $query->getMetaData('exo_entity_list_moderation_state_sort_direction') ?: 'DESC';
      $revision_data_table = $original_entity_type->getRevisionDataTable();
      $query->addJoin('LEFT', $revision_data_table, 'entity_revision_data_table', $table . '.content_entity_revision_id = entity_revision_data_table.vid');
      $query->orderBy('entity_revision_data_table.' . $sort_field, $sort_direction);
    }

    $value = $query->getMetaData('exo_entity_list_moderation_state');
    if (!empty($value)) {
      if (!is_array($value)) {
        $value = [$value];
      }
      $query->condition($table . '.moderation_state', $value, 'IN');
    }
  }
}

/**
 * Implements hook_exo_list_builder_fields_alter().
 */
function exo_list_builder_exo_list_builder_fields_alter(array &$fields, $entity_type_id) {
  foreach ($fields as $field_id => $field) {
    if ($field['type'] === 'address') {
      $new_field = $field;
      $new_field['label'] .= ': ' . t('Full Name');
      $new_field['alias_field'] = $field_id;
      $new_field['alias_type'] = 'address__name';
      $fields[$field_id . '__name'] = $new_field;

      $new_field = $field;
      $new_field['label'] .= ': ' . t('Organization (Company)');
      $new_field['alias_field'] = $field_id;
      $new_field['alias_type'] = 'content_alias_property';
      $new_field['alias_property'] = 'organization';
      $fields[$field_id . '__organization'] = $new_field;

      $new_field = $field;
      $new_field['label'] .= ': ' . t('Street');
      $new_field['alias_field'] = $field_id;
      $new_field['alias_type'] = 'address__street';
      $fields[$field_id . '__street'] = $new_field;

      $new_field = $field;
      $new_field['label'] .= ': ' . t('Locality (City)');
      $new_field['alias_field'] = $field_id;
      $new_field['alias_type'] = 'content_alias_property';
      $new_field['alias_property'] = 'locality';
      $fields[$field_id . '__locality'] = $new_field;

      $new_field = $field;
      $new_field['label'] .= ': ' . t('Administrative Area (State)');
      $new_field['alias_field'] = $field_id;
      $new_field['alias_type'] = 'content_alias_property';
      $new_field['alias_property'] = 'administrative_area';
      $fields[$field_id . '__administrative_area'] = $new_field;

      $new_field = $field;
      $new_field['label'] .= ': ' . t('Postal Code');
      $new_field['alias_field'] = $field_id;
      $new_field['alias_type'] = 'content_alias_property';
      $new_field['alias_property'] = 'postal_code';
      $fields[$field_id . '__postal_code'] = $new_field;
    }
  }
}

/**
 * Implements hook_file_download().
 */
function exo_list_builder_file_download($uri) {
  if (!preg_match('#private:\/\/exo-entity-list/([^/]+)/#', $uri, $match)) {
    return NULL;
  }
  // Get the file record based on the URI. If not in the database just return.
  /** @var \Drupal\file\FileRepositoryInterface $file_repository */
  $file_repository = \Drupal::service('file.repository');
  $file = $file_repository->loadByUri($uri);
  if (!$file) {
    return;
  }

  // Temporarily set the file to permanent so that it can be downloaded.
  $file->isPermanent();

  // Access is granted.
  $headers = file_get_content_headers($file);
  return $headers;
}
